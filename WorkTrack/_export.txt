using Microsoft.Data.Sqlite;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using Dapper;

namespace WorkTrack
{
    /// <summary>
    /// Page1.xaml ?????
    /// </summary>
    public partial class Page1_Task : Page
    {
        public Page1_Task()
        {
            InitializeComponent();
            ip_TaskDate.SelectedDate = DateTime.Today;
            DefaultSearch_TaskBody();

        }

        public async Task DefaultSearch_TaskBody()
        {
            try
            {
                DateTime? selectedDate = ip_TaskDate.SelectedDate;

                if (selectedDate == null)
                {
                    MessageBox.Show("??????", "??", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }

                await using var connection = new SqliteConnection(App.ConnectionString);
                await connection.OpenAsync();

                var taskBodyData = (await connection.QueryAsync<TaskBody>(
                    "SELECT p1.*, t1.UnitName FROM TaskBody p1 LEFT JOIN Unit t1 ON p1.UnitID = t1.UnitID WHERE TaskDate = @TaskDate",
                    new { TaskDate = selectedDate.Value.Date }
                )).ToList();

                if (this.FindName("dt_TaskBody") is DataGrid dt_TaskBody)
                {
                    dt_TaskBody.ItemsSource = taskBodyData;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to load task body: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }


        private void DeleteButton_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("Delete");
        }

        private void EditButton_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("Edit");
        }

        private void DetailButton_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("Detail");
        }

        private void bt_TaskAdd_Click(object sender, RoutedEventArgs e)
        {
            var selectedDate = ip_TaskDate.SelectedDate;
            InputTask inputTaskWindow = new InputTask(selectedDate);
            inputTaskWindow.ShowDialog();
        }
    }

}

This is Page1_Task.xaml.cs

<Page x:Class="WorkTrack.Page1_Task"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:WorkTrack"
      xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
      mc:Ignorable="d" 
      d:DesignHeight="450" d:DesignWidth="800"
      FontFamily="TimeNewsRoman"
      Title="Page1_Task">

    <Page.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Elements.xaml"/>
                <ResourceDictionary Source="DataGrid.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Page.Resources>

    <Grid HorizontalAlignment="Stretch">
        <Border Style="{StaticResource CardStyle}" Background="#F3F3F3">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="40" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>

                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="TaskList" Grid.Column="0"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                FontSize="18"
                                FontWeight="Bold"
                                Margin="5,0,0,0"
                                />
                    <StackPanel Orientation="Horizontal" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Right">
                        <DatePicker x:Name="ip_TaskDate"
                                        Style="{StaticResource MaterialDesignFloatingHintDatePicker}"
                                        Width="80"
                                        Height="30"
                                        Margin="5,-10,5,0"
                                        VerticalAlignment="Center"
                                        materialDesign:HintAssist.Hint="TaskDate"
                                        materialDesign:HintAssist.FloatingOffset="0,-12" FirstDayOfWeek="Monday" SelectedDateFormat="Short"
                        />
                        <Button x:Name="bt_TaskAdd" Width="30" Padding="-5,0" Margin="0" Click="bt_TaskAdd_Click" Tag="{Binding UnitID}" Style="{StaticResource MaterialDesignFlatButton}">
                            <Viewbox Width="15" Height="15" Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Image Source="/icon/add_c.png" RenderOptions.BitmapScalingMode="HighQuality"/>
                            </Viewbox>
                        </Button>
                    </StackPanel>
                </Grid>

                <DataGrid x:Name="dt_TaskBody" Grid.Row="1"
                            AutoGenerateColumns="False"
                            CanUserAddRows="False"
                            CanUserDeleteRows="False"
                            IsReadOnly="True"
                            SelectionUnit="FullRow"
                            BorderThickness="0"
                            Background="White"
                            Margin="5"
                            ColumnHeaderHeight="40"
                            RowHeight="35"
                            Style="{StaticResource MaterialDesignDataGrid}">
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="TaskName" Binding="{Binding TaskName}" Width="120" SortMemberPath="TaskName"/>
                        <DataGridTextColumn Header="Description" Binding="{Binding Description}" Width="*" SortMemberPath="Description"/>
                        <DataGridTextColumn Header="Duration" Binding="{Binding Duration}" Width="*" SortMemberPath="Duration" />
                        <DataGridTextColumn Header="UnitName" Binding="{Binding UnitName}" Width="*" SortMemberPath="UnitName"/>
                        <DataGridTemplateColumn Header="Action" Width="*" >
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                                        <Button Width="30" Height="30" Padding="-5,0" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center"  Tag="{Binding TaskID}" Style="{StaticResource MaterialDesignFlatButton}">
                                            <Viewbox Width="15" Height="15" Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center">
                                                <Image Source="/icon/file-edit.png" RenderOptions.BitmapScalingMode="HighQuality"/>
                                            </Viewbox>
                                        </Button>
                                        <Button x:Name="bt_TaskDelete" Width="30" Height="30" Padding="-5,0" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Click="DeleteButton_Click" Tag="{Binding UnitID}" Style="{StaticResource MaterialDesignFlatButton}">
                                            <Viewbox Width="15" Height="15" Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center">
                                                <Image Source="/icon/cross-small.png" RenderOptions.BitmapScalingMode="HighQuality"/>
                                            </Viewbox>
                                        </Button>
                                    </StackPanel>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                    </DataGrid.Columns>
                </DataGrid>
            </Grid>
        </Border>
    </Grid>
</Page>

This is Page1_Task.xaml

<Window x:Class="WorkTrack.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WorkTrack"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        xmlns:lvc="clr-namespace:LiveCharts.Wpf;assembly=LiveCharts.Wpf"
        mc:Ignorable="d"
        Title="MainWindow" Height="600" Width="1000"
        WindowStartupLocation="CenterScreen"
        Background="White"
        FontFamily="Calibri"
        >
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Elements.xaml"/>
                <ResourceDictionary Source="DataGrid.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="200" />
        </Grid.ColumnDefinitions>
        <Grid Grid.Column="0" >
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="390"/>
            </Grid.RowDefinitions>
            <Grid Grid.Row="0" HorizontalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Border Style="{StaticResource CardStyle}" Grid.Column="0" Background="White"> <!--#7AB2B2-->
                    <!-- Card 1 Content -->
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="25"/>
                            <RowDefinition Height="25"/>
                            <RowDefinition Height="25"/>
                            <RowDefinition Height="60"/>
                        </Grid.RowDefinitions>
                            <Grid Grid.Row="0">
                                <StackPanel Orientation="Horizontal" Margin="0,5,0,0">
                                    <Image Source="/icon/edit.png"
                                               Width="20"
                                               Height="20"
                                               Margin="5,0,0,0"
                                               HorizontalAlignment="Center"
                                               VerticalAlignment="Center"/>
                                    <TextBlock Text="TaskView"
                                               Margin="5,0,0,0"
                                               HorizontalAlignment="Center"
                                               VerticalAlignment="Center"
                                               FontSize="20"
                                               FontWeight="Bold"/>
                                </StackPanel>
                            </Grid>
                            <Grid Grid.Row="1">
                                <TextBlock Text="{Binding TodayDate, StringFormat=' {0:yyyy-MM-dd}'}" FontSize="12" Margin="5,10,0,0"/>
                            </Grid>
                            <Grid Grid.Row="2">
                                <StackPanel Orientation="Vertical">
                                <lvc:CartesianChart MinWidth="100" Series="{Binding SeriesCollection}" Margin="0,-15,0,-10" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                    <lvc:CartesianChart.AxisX>
                                        <lvc:Axis Title="" Labels="">
                                            <lvc:Axis.Separator>
                                                <lvc:Separator StrokeThickness="0"/>
                                            </lvc:Axis.Separator>
                                        </lvc:Axis>
                                    </lvc:CartesianChart.AxisX>

                                    <lvc:CartesianChart.AxisY>
                                        <lvc:Axis Title="" Labels="">
                                            <lvc:Axis.Separator>
                                                <lvc:Separator StrokeThickness="0"/>
                                            </lvc:Axis.Separator>
                                        </lvc:Axis>
                                    </lvc:CartesianChart.AxisY>

                                </lvc:CartesianChart>
                            </StackPanel>
                            </Grid>
                            <Grid Grid.Row="3">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                </Grid>
                            <StackPanel Grid.Column="0" Orientation="Vertical">
                                 <StackPanel Orientation="Horizontal" Height="20">
                                     <TextBlock Text="Task Count :"
                                                        FontSize="11"
                                                        Foreground="Gray"
                                                        Margin="5,0,0,0"
                                                        FontWeight="Bold"
                                                        VerticalAlignment="Bottom"
                                                        />
                                     <TextBlock x:Name="Card_Label1"
                                                        Text=""
                                                        FontSize="15"
                                                        Foreground="DarkCyan"
                                                        Margin="5,0,0,0"
                                                        FontWeight="Bold"
                                                        VerticalAlignment="Bottom"
                                                        />
                                 </StackPanel>
                                <StackPanel Orientation="Horizontal" Height="20">
                                    <TextBlock Text="UsedPoints:"
                                                   FontSize="11"
                                                   Foreground="Gray"
                                                   Margin="5,0,0,0"
                                                   FontWeight="Bold"
                                                   VerticalAlignment="Bottom"
                                                   />
                                    <TextBlock x:Name="Card_Label2"
                                                   Text=""
                                                   FontSize="15"
                                                   Foreground="DarkCyan"
                                                   Margin="5,0,0,0"
                                                   FontWeight="Bold"
                                                   VerticalAlignment="Bottom"
                                                   />
                                </StackPanel>

                            </StackPanel>
                               
                                <StackPanel Grid.Column="1" Orientation="Horizontal" VerticalAlignment="Bottom" HorizontalAlignment="Right">
                                        <Button Width="30" Height="30" Padding="-5,0" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Click="bt_OverTime_Click" Tag="{Binding UnitID}" Style="{StaticResource MaterialDesignFlatButton}">
                                            <Viewbox Width="15" Height="15" Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center">
                                            <Image Source="/icon/time-add_c.png" RenderOptions.BitmapScalingMode="HighQuality"/>
                                            </Viewbox>
                                        </Button>
                                        <Button Width="30" Height="30" Padding="-5,0" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Click="bt_TaskCheck_Click" Tag="{Binding UnitID}" Style="{StaticResource MaterialDesignFlatButton}">
                                            <Viewbox Width="15" Height="15" Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center">
                                            <Image Source="/icon/angle-circle-right_c.png" RenderOptions.BitmapScalingMode="HighQuality"/>
                                            </Viewbox>
                                        </Button>
                                </StackPanel>
                            </Grid>
                    </Grid>
                    
                </Border>

                <Border Style="{StaticResource CardStyle}" Grid.Column="1" Background="#4D869C">
                    <!-- Card 2 Content -->
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="30"/>
                            <RowDefinition Height="300"/>
                            <RowDefinition Height="20"/>
                        </Grid.RowDefinitions>
                        <Grid Grid.Row="0">
                            <StackPanel Orientation="Horizontal">
                                <Image Source="/icon/edit.png"
                                               Width="20"
                                               Height="20"
                                               Margin="10,0,0,0"
                                               HorizontalAlignment="Center"
                                               VerticalAlignment="Center"/>
                                <TextBlock Text="TaskView"
                                               Margin="5,0,0,0"
                                               HorizontalAlignment="Center"
                                               VerticalAlignment="Center"
                                               FontSize="20"
                                               FontWeight="Bold"/>
                            </StackPanel>
                        </Grid>
                        <Grid Grid.Row="1">

                        </Grid>
                    </Grid>
                </Border>

                <Border Style="{StaticResource CardStyle}" Grid.Column="2" Background="#CDE8E5">
                    <!-- Card 3 Content -->
                    <StackPanel>
                        <TextBlock Text="Index 3" HorizontalAlignment="Left" VerticalAlignment="Center" FontSize="18" FontWeight="Bold"/>
                        <TextBlock Text="" />
                        <TextBlock Text="Index 3 Content" HorizontalAlignment="Left" VerticalAlignment="Center"  FontSize="10"/>
                    </StackPanel>
                </Border>

            </Grid>

            <Frame x:Name="MainFrame" Grid.Row="1" HorizontalAlignment="Stretch" NavigationUIVisibility="Hidden"/>

        </Grid>

        <Grid Grid.Column="1">
            <StackPanel x:Name="MainForm">

                <TextBlock Text="Task View" HorizontalAlignment="Left" VerticalAlignment="Center" FontSize="18" FontWeight="Bold" Margin="0,10,0,0"/>

                <DatePicker x:Name="ip_TaskDate"
                    Style="{StaticResource MaterialDesignFloatingHintDatePicker}"
                    Width="180"
                    Padding="0,5"
                    Margin="5,10"
                    materialDesign:HintAssist.Hint="TaskDate"
                    materialDesign:HintAssist.FloatingOffset="0,-12" FirstDayOfWeek="Monday" SelectedDateFormat="Short"
                />


                <TextBox x:Name="ip_TaskID"
                         Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                         Width="{StaticResource FormElementWidth}"
                         Padding="{StaticResource FormElementPadding}"
                         Margin="{StaticResource FormElementMargin}"
                         materialDesign:HintAssist.Hint="TaskID"
                         materialDesign:HintAssist.FloatingOffset="0,-12"
                />

                <TextBox x:Name="ip_TaskName"
                         Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                         Width="{StaticResource FormElementWidth}"
                         Padding="{StaticResource FormElementPadding}"
                         Margin="{StaticResource FormElementMargin}"
                         materialDesign:HintAssist.Hint="TaskName"
                         materialDesign:HintAssist.FloatingOffset="0,-12"
                         materialDesign:TextFieldAssist.HasClearButton="True"
                />

                <TextBox x:Name="ip_Describe"
                         Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                         Width="{StaticResource FormElementWidth}"
                         Padding="{StaticResource FormElementPadding}"
                         Margin="{StaticResource FormElementMargin}"
                         materialDesign:HintAssist.Hint="Describe"
                         materialDesign:HintAssist.FloatingOffset="0,-12"
                         materialDesign:TextFieldAssist.HasClearButton="True"
                />

                <ComboBox x:Name="ip_DurationLevel"
                          Style="{StaticResource MaterialDesignFloatingHintComboBox}"
                          Width="{StaticResource FormElementWidth}"
                          Padding="{StaticResource FormElementPadding}"
                          Margin="{StaticResource FormElementMargin}"
                          materialDesign:HintAssist.Hint="DurationLevel"
                          materialDesign:HintAssist.FloatingOffset="0,-12"
                          
                          >
                    <ComboBoxItem Content="Tiny" Tag="1" />
                    <ComboBoxItem Content="Small" Tag="2" />
                    <ComboBoxItem Content="Medium" Tag="3" />
                    <ComboBoxItem Content="Large" Tag="4" />
                    <ComboBoxItem Content="Huge" Tag="5" />
                    <ComboBoxItem Content="-Customize-" Tag="6" FontWeight="Bold" Foreground="#4D869C" />
                </ComboBox>


                <TextBox x:Name="ip_Duration"
                         Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                         Width="{StaticResource FormElementWidth}"
                         Padding="{StaticResource FormElementPadding}"
                         Margin="{StaticResource FormElementMargin}"
                         materialDesign:HintAssist.Hint="Duration"
                         materialDesign:HintAssist.FloatingOffset="0,-12"
                         materialDesign:TextFieldAssist.HasClearButton="True"
                         Visibility="Collapsed"
                />

                <ComboBox x:Name="ip_UnitName"
                          Style="{StaticResource MaterialDesignFloatingHintComboBox}"
                          Width="{StaticResource FormElementWidth}"
                          Padding="{StaticResource FormElementPadding}"
                          Margin="{StaticResource FormElementMargin}"
                          materialDesign:HintAssist.Hint="UnitName"
                          materialDesign:HintAssist.FloatingOffset="0,-12"
                          >
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}">
                                        <TextBlock.Style>
                                            <Style TargetType="TextBlock">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding}" Value="-Add-">
                                                        <Setter Property="Foreground" Value="#4D869C" />
                                                        <Setter Property="FontWeight" Value="Bold" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBlock.Style>
                                    </TextBlock>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                </ComboBox>

                <ComboBox x:Name="ip_ApplicationID"
                          Style="{StaticResource MaterialDesignFloatingHintComboBox}"
                          Width="{StaticResource FormElementWidth}"
                          Padding="{StaticResource FormElementPadding}"
                          Margin="{StaticResource FormElementMargin}"
                          materialDesign:HintAssist.Hint="ApplicationID"
                          materialDesign:HintAssist.FloatingOffset="0,-12"/>
                <Button x:Name ="bt_Refresh"
                        Style="{StaticResource MaterialDesignFlatButton}"
                        Width="{StaticResource FormElementWidth}"
                        Padding="{StaticResource FormElementPadding}"
                        Margin="{StaticResource FormElementMargin}"
                        materialDesign:ButtonAssist.CornerRadius="20"
                        Content="Refresh"
                        HorizontalAlignment="Left"/>
                <Button x:Name ="bt_Exist"
                        Style="{StaticResource MaterialDesignFlatButton}"
                        Width="{StaticResource FormElementWidth}"
                        Padding="{StaticResource FormElementPadding}"
                        Margin="{StaticResource FormElementMargin}"
                        materialDesign:ButtonAssist.CornerRadius="20"
                        Content="Exist"
                        HorizontalAlignment="Left"/>

                <Button x:Name ="bt_Test"
                        Style="{StaticResource MaterialDesignFlatButton}"
                        Width="{StaticResource FormElementWidth}"
                        Padding="{StaticResource FormElementPadding}"
                        Margin="{StaticResource FormElementMargin}"
                        materialDesign:ButtonAssist.CornerRadius="20"
                        Content="Test"
                        HorizontalAlignment="Left"
                />
            </StackPanel>
        </Grid>
    </Grid>
</Window>

This is MainWindow.xaml

using Dapper;
using LiveCharts;
using LiveCharts.Wpf;
using Microsoft.Data.Sqlite;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Navigation;

namespace WorkTrack
{
    

    public partial class MainWindow : Window
    {

        private TaskSearch _taskSearch;  // TaskSearch ???
        public DateTime TodayDate { get; set; }
        public ChartValues<double> TaskDurations { get; set; } = new ChartValues<double>();
        public SeriesCollection SeriesCollection { get; set; }

        public MainWindow()
        {
            InitializeComponent();

            _taskSearch = new TaskSearch();  // ??? TaskSearch
            DataContext = this;
            TodayDate = DateTime.Now;

            MainFrame.NavigationService.Navigate(new Page0_Welcome());

            DatabaseInitializer dbInitializer = new DatabaseInitializer();
            dbInitializer.Initialize();

            TaskDurations = new ChartValues<double>();
            SeriesCollection = new SeriesCollection();
            InitializeStackedColumnChart();

        }
        #region Cd1_Bt
        private void bt_OverTime_Click(object sender, RoutedEventArgs e)
        {
            MainFrame.NavigationService.Navigate(new Page1_Task());
        }
        private void bt_TaskCheck_Click(object sender, RoutedEventArgs e)
        {
            MainFrame.NavigationService.Navigate(new Page1_Task());
        }
        #endregion



        public async Task InitializeStackedColumnChart()
        {
            SeriesCollection.Clear();

            try
            {
                var tasks = await _taskSearch.GetTasks(DateTime.Now);  // ? TaskSearch ?????????

                int taskCount = 0;
                int pointsCount = 0;

                foreach (var task in tasks)
                {
                    taskCount++;
                    pointsCount += task.Points;

                    SeriesCollection.Add(new StackedRowSeries
                    {
                        Values = new ChartValues<double> { task.Duration },
                        StackMode = StackMode.Values,
                        DataLabels = true,
                        Fill = Brushes.Teal,
                        Stroke = Brushes.White,
                        StrokeThickness = 0.5,
                        MaxRowHeight = 20,
                        Title = task.TaskName
                    });
                }

                // ?????????


                var Emptyquery = "SELECT AvailableMins FROM TaskHeader WHERE TaskDate = @TaskDate";
                var durations = await ExecuteQueryAsync<int>(Emptyquery, new { TaskDate = DateTime.Now.Date });

                foreach (var duration in durations)
                {
                    SeriesCollection.Add(new StackedRowSeries
                    {
                        Values = new ChartValues<double> { duration },
                        StackMode = StackMode.Values,
                        DataLabels = true,
                        Fill = Brushes.Gray,
                        Stroke = Brushes.White,
                        StrokeThickness = 0.5,
                        MaxRowHeight = 20,
                        Title = "Empty",
                    });
                }

                Card_Label1.Text = taskCount.ToString();
                Card_Label2.Text = pointsCount.ToString();

            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to load task durations: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private async Task<IEnumerable<T>> ExecuteQueryAsync<T>(string query, object parameters = null)
        {
            try
            {
                await using var connection = new SqliteConnection(App.ConnectionString);
                await connection.OpenAsync();
                return await connection.QueryAsync<T>(query, parameters);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to execute query: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                return Enumerable.Empty<T>();
            }
        }

    }


}
This is MainWindow.xaml.cs

<Window x:Class="WorkTrack.InputTask"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        xmlns:local="clr-namespace:WorkTrack"
        mc:Ignorable="d"
        Title="InputTask" Height="520" Width="300">
    
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Elements.xaml"/>
                <ResourceDictionary Source="DataGrid.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>
    
    <Grid>
        <StackPanel x:Name="MainForm">

            <TextBlock Text="Add Task" Margin="20,10,10,10" HorizontalAlignment="Left" VerticalAlignment="Center" FontSize="18" FontWeight="Bold" />

            <DatePicker x:Name="ip_TaskDate"
                    Style="{StaticResource MaterialDesignFloatingHintDatePicker}"
                    Width="180"
                    Padding="0,5"
                    Margin="5,10"
                    materialDesign:HintAssist.Hint="TaskDate"
                    materialDesign:HintAssist.FloatingOffset="0,-12" FirstDayOfWeek="Monday" SelectedDateFormat="Short"
                />

            <TextBox x:Name="ip_TaskID"
                         Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                         Width="{StaticResource FormElementWidth}"
                         Padding="{StaticResource FormElementPadding}"
                         Margin="{StaticResource FormElementMargin}"
                         materialDesign:HintAssist.Hint="TaskID"
                         materialDesign:HintAssist.FloatingOffset="0,-12"
                />

            <TextBox x:Name="ip_TaskName"
                         Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                         Width="{StaticResource FormElementWidth}"
                         Padding="{StaticResource FormElementPadding}"
                         Margin="{StaticResource FormElementMargin}"
                         materialDesign:HintAssist.Hint="TaskName"
                         materialDesign:HintAssist.FloatingOffset="0,-12"
                         materialDesign:TextFieldAssist.HasClearButton="True"
                />

            <TextBox x:Name="ip_Describe"
                         Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                         Width="{StaticResource FormElementWidth}"
                         Padding="{StaticResource FormElementPadding}"
                         Margin="{StaticResource FormElementMargin}"
                         materialDesign:HintAssist.Hint="Describe"
                         materialDesign:HintAssist.FloatingOffset="0,-12"
                         materialDesign:TextFieldAssist.HasClearButton="True"
                />

            <ComboBox x:Name="ip_DurationLevel"
                      Style="{StaticResource MaterialDesignFloatingHintComboBox}"
                      Width="{StaticResource FormElementWidth}"
                      Padding="{StaticResource FormElementPadding}"
                      Margin="{StaticResource FormElementMargin}"
                      materialDesign:HintAssist.Hint="DurationLevel"
                      materialDesign:HintAssist.FloatingOffset="0,-12"
                      SelectedValuePath="Points"
                      SelectionChanged="ip_DurationLevel_SelectionChanged"
                      >
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding DurationLevelName}">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding DurationLevelName}" Value="-Customized-">
                                            <Setter Property="Foreground" Value="#4D869C" />
                                            <Setter Property="FontWeight" Value="Bold" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>


            <TextBox x:Name="ip_Duration"
                     Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                     Width="{StaticResource FormElementWidth}"
                     Padding="{StaticResource FormElementPadding}"
                     Margin="{StaticResource FormElementMargin}"
                     materialDesign:HintAssist.Hint="Duration"
                     materialDesign:HintAssist.FloatingOffset="0,-12"
                     materialDesign:TextFieldAssist.HasClearButton="True"
                     Visibility="Collapsed"
                />

            <ComboBox x:Name="ip_UnitName"
                      Style="{StaticResource MaterialDesignFloatingHintComboBox}"
                      Width="{StaticResource FormElementWidth}"
                      Padding="{StaticResource FormElementPadding}"
                      Margin="{StaticResource FormElementMargin}"
                      materialDesign:HintAssist.Hint="UnitName"
                      materialDesign:HintAssist.FloatingOffset="0,-12"
                      SelectedValuePath="UnitID"
                      SelectionChanged="ip_DurationLevel_SelectionChanged"
                      >
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding UnitName}">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding UnitName}" Value="-Add-">
                                            <Setter Property="Foreground" Value="#4D869C" />
                                            <Setter Property="FontWeight" Value="Bold" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>

            <ComboBox x:Name="ip_ApplicationID"
                          Style="{StaticResource MaterialDesignFloatingHintComboBox}"
                          Width="{StaticResource FormElementWidth}"
                          Padding="{StaticResource FormElementPadding}"
                          Margin="{StaticResource FormElementMargin}"
                          materialDesign:HintAssist.Hint="ApplicationID"
                          materialDesign:HintAssist.FloatingOffset="0,-12"/>
            <Button x:Name ="bt_Refresh"
                        Style="{StaticResource MaterialDesignFlatButton}"
                        Width="{StaticResource FormElementWidth}"
                        Padding="{StaticResource FormElementPadding}"
                        Margin="{StaticResource FormElementMargin}"
                        materialDesign:ButtonAssist.CornerRadius="20"
                        HorizontalAlignment="Center"
                        Content="Refresh"
                        Click="RefreshButton_Click"
                        />
            <Button x:Name ="bt_Close"
                        Style="{StaticResource MaterialDesignFlatButton}"
                        Width="{StaticResource FormElementWidth}"
                        Padding="{StaticResource FormElementPadding}"
                        Margin="{StaticResource FormElementMargin}"
                        materialDesign:ButtonAssist.CornerRadius="20"
                        HorizontalAlignment="Center"
                        Content="Close"
                        />

        </StackPanel>
    </Grid>
</Window>

This is InputTask.xaml

using Dapper;
using LiveCharts.Wpf;
using LiveCharts;
using Microsoft.Data.Sqlite;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace WorkTrack
{
    /// <summary>
    /// InputTask.xaml ?????
    /// </summary>
    public partial class InputTask : Window
    {
        private DateTime? _taskDate;
        public InputTask(DateTime? taskDate = null)
        {
            InitializeComponent();
            _taskDate = taskDate;

            // ?? Loaded ??
            Loaded += MainWindow_Loaded;

        }

        private async void MainWindow_Loaded(object sender, RoutedEventArgs e)
        {

            ip_TaskDate.SelectedDate = _taskDate.Value;
            await LoadUnitNames();
            await LoadDurationLevel();

        }
        private async Task LoadUnitNames()
        {
            try
            {
                await using var connection = new SqliteConnection(App.ConnectionString);
                await connection.OpenAsync();

                var unitNames = (await connection.QueryAsync<Unit>("SELECT UnitID, UnitName FROM Unit")).ToList();
                unitNames.Add(new Unit { UnitID = 0, UnitName = "-Add-" });

                ip_UnitName.Items.Clear(); // ????? ItemsSource ?,??????
                ip_UnitName.ItemsSource = unitNames;

                if (unitNames.Count > 0)
                {
                    ip_UnitName.SelectedIndex = 0;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to load unit names: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private async Task LoadDurationLevel()
        {
            try
            {
                await using var connection = new SqliteConnection(App.ConnectionString);
                await connection.OpenAsync();

                var durationNames = (await connection.QueryAsync<Unit>("SELECT DurationLevelName, Points FROM DurationLevel")).ToList();

                ip_DurationLevel.Items.Clear();
                ip_DurationLevel.ItemsSource = durationNames;

                if (durationNames.Count > 0)
                {
                    ip_DurationLevel.SelectedIndex = 2;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to load unit names: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void ip_UnitName_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ip_UnitName.SelectedItem != null && ip_UnitName.SelectedItem.ToString() == "-Add-")
            {
                UnitManagement unitManagementWindow = new UnitManagement();
                unitManagementWindow.Closed += UnitManagementWindow_Closed;
                unitManagementWindow.ShowDialog();
            }
        }
        private async void UnitManagementWindow_Closed(object sender, EventArgs e)
        {
            await LoadUnitNames(); // ??????UnitName??
        }
        private void ip_DurationLevel_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ip_DurationLevel.SelectedItem is ComboBoxItem selectedItem)
            {
                ToggleDurationVisibility(selectedItem.Content.ToString());
            }
        }
        private void ToggleDurationVisibility(string durationLevel)
        {
            if (durationLevel == "-Customize-")
            {
                ip_Duration.Visibility = Visibility.Visible;
            }
            else
            {
                ip_Duration.Visibility = Visibility.Collapsed;
            }
        }

        private async Task RefreshTaskBodyAsync()
        {
            try
            {
                using var connection = new SqliteConnection(App.ConnectionString);
                await connection.OpenAsync();

                DateTime? taskDate = ip_TaskDate.SelectedDate;
                string taskID = ip_TaskID.Text;
                string taskName = ip_TaskName.Text;
                string description = ip_Describe.Text;
                string durationLevel = ip_DurationLevel.Text;
                int? duration = string.IsNullOrEmpty(ip_Duration.Text) ? (int?)null : int.Parse(ip_Duration.Text);
                int selectedUnitID = (int)ip_UnitName.SelectedValue;
                string applicationID = ip_ApplicationID.Text;


                if (string.IsNullOrEmpty(taskID))
                {
                    var insertQuery = $$"""
                        INSERT INTO TaskBody (TaskDate, TaskName, DurationLevel, Duration, Description, UnitID, ApplicationID)
                        VALUES (@TaskDate, @TaskName, @DurationLevel, @Duration, @Description, @UnitID, @ApplicationID);
                    """;

                    await connection.ExecuteAsync(insertQuery, new
                    {
                        TaskDate = taskDate,
                        TaskName = taskName,
                        DurationLevel = durationLevel,
                        Duration = duration,
                        Description = description,
                        UnitID = selectedUnitID,
                        ApplicationID = applicationID,
                    });
                }
                else
                {
                    var updateQuery = $$"""
                        UPDATE TaskBody
                        SET TaskName = @TaskName, DurationLevel = @DurationLevel, Duration = @Duration, Description = @Description,
                            UnitID = @UnitID, ApplicationID = @ApplicationID
                        WHERE TaskID = @TaskID;
                    """;

                    await connection.ExecuteAsync(updateQuery, new
                    {
                        TaskName = taskName,
                        DurationLevel = durationLevel,
                        Duration = duration,
                        Description = description,
                        UnitID = selectedUnitID,
                        ApplicationID = applicationID,
                        TaskID = taskID
                    });
                }

                var insertOrUpdateTaskHeader = $$"""

                    WITH t_UsedPoints as (

                        SELECT p1.TaskDate ,sum(p2.Points) as UsedPoints 
                        FROM
                            TaskBody p1
                            LEFT JOIN DurationLevel p2 on p1.DurationLevel = p2.DurationLevel
                        WHERE
                            p1.DurationLevel != '-Customized-'
                            and p1.TaskDate = @TaskDate
                        GROUP BY TaskDate

                    ), t_Customized as (

                        SELECT TaskDate ,sum(p1.Duration) as CustomizedMins
                        FROM TaskBody p1
                        WHERE
                            p1.DurationLevel = '-Customized-'
                            and p1.TaskDate = @TaskDate
                        GROUP BY TaskDate

                    )
                    UPDATE TaskHeader 
                    SET
                        UsedPoints = p1.UsedPoints
                        ,CustomizedMins = coalesce(p2.CustomizedMins,0)
                    FROM
                        t_UsedPoints p1
                        LEFT JOIN t_Customized p2 on p1.TaskDate = p2.TaskDate
                    WHERE TaskHeader.TaskDate = @TaskDate;
                    ;
                """;

                await connection.ExecuteAsync(insertOrUpdateTaskHeader, new{TaskDate = taskDate});
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to update task body: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }

        }
        private async void RefreshButton_Click(object sender, RoutedEventArgs e)
        {
            await RefreshTaskBodyAsync();

            ip_TaskID.Clear();
            ip_TaskName.Clear();
            ip_Describe.Clear();
            ip_DurationLevel.SelectedIndex = 2;
            ip_UnitName.SelectedIndex = 0;
            ip_ApplicationID.SelectedIndex = 0;

            var mainWindow = Application.Current.MainWindow as MainWindow;
            if (mainWindow != null)
            {
                await mainWindow.InitializeStackedColumnChart(); // ?? MainWindow ???

                if (mainWindow.MainFrame.Content is Page1_Task page1Task)
                {
                    await page1Task.DefaultSearch_TaskBody(); // ?? Page1_Task ? DataGrid
                }
            }
        }

    }


}

This is InputTask.xaml.cs

using Dapper;
using Microsoft.Data.Sqlite;
using LiveCharts;
using LiveCharts.Wpf;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Navigation;

namespace WorkTrack 
{
    public class TaskSearch
    {

        public async Task<List<TaskBody>> GetTasks(DateTime taskDate)
        {
            var query = "SELECT p1.*, t1.UnitName FROM TaskBody p1 LEFT JOIN Unit t1 ON p1.UnitID = t1.UnitID WHERE TaskDate = @TaskDate";

            await using var connection = new SqliteConnection(App.ConnectionString);
            await connection.OpenAsync();

            return (await connection.QueryAsync<TaskBody>(query, new { TaskDate = taskDate })).ToList();
        }

        public async Task UpdateTaskBodyAsync(TaskBody taskBody)
        {
            await using var connection = new SqliteConnection(App.ConnectionString);
            await connection.OpenAsync();

            // ?????? TaskBody ???
        }

        // ??????
    }

}

This is TaskSearch.cs

using System;
using System.Diagnostics;
using System.IO;
using Dapper;
using Microsoft.Data.Sqlite;

namespace WorkTrack
{
    public class DatabaseInitializer
    {
        private readonly string DatabasePath = "Database/app.db"; // ????????DatabasePath???readonly

        public void Initialize()
        {
            try
            {
                string fullPath = Path.Combine(Directory.GetCurrentDirectory(), DatabasePath);

                if (!File.Exists(fullPath))
                {
                    // ?? DirectoryPath ?? null
                    string directoryPath = Path.GetDirectoryName(fullPath);
                    if (directoryPath != null)
                    {
                        Directory.CreateDirectory(directoryPath);
                    }
                    Debug.WriteLine($"???????: {fullPath}");
                }

                using (var connection = new SqliteConnection($"Data Source={fullPath};"))
                {
                    connection.Open();

                    var createTableQueries = new[]
                    {
                        @"
                        CREATE TABLE IF NOT EXISTS TaskBody (
                            TaskID INTEGER PRIMARY KEY AUTOINCREMENT,
                            TaskDate DATE NOT NULL,
                            TaskName TEXT NOT NULL,
                            DurationLevel INTEGER,
                            Duration INTEGER,
                            Description TEXT,
                            UnitID INTEGER,
                            ApplicationID INTEGER,
                            RegistDatetime DATETIME DEFAULT CURRENT_TIMESTAMP,
                            DeleteFlag BOOLEAN DEFAULT 0
                        );",
                        @"
                        CREATE TABLE IF NOT EXISTS Application (
                            ApplicationID INTEGER PRIMARY KEY AUTOINCREMENT,
                            ApplicationName TEXT,
                            ApplicationSubName TEXT,
                            ApplicationStatus TEXT,
                            ApplicationDatetime DATETIME,
                            PCDFlag BOOLEAN DEFAULT 0,
                            UnitID INTEGER,
                            RegistDatetime DATETIME DEFAULT CURRENT_TIMESTAMP,
                            DeleteFlag BOOLEAN DEFAULT 0
                        );",
                        @"
                        CREATE TABLE IF NOT EXISTS Unit (
                            UnitID INTEGER PRIMARY KEY AUTOINCREMENT,
                            UnitName TEXT,
                            RegistDatetime DATETIME DEFAULT CURRENT_TIMESTAMP,
                            DeleteFlag BOOLEAN DEFAULT 0
                        );",
                        @"
                        CREATE TABLE IF NOT EXISTS TaskHeader (
                            TaskDate DATE PRIMARY KEY,
                            OverHours REAL DEFAULT 0,
                            TotalHours REAL DEFAULT 8,
                            TotalMins REAL DEFAULT 480,
                            CustomizedMins REAL DEFAULT 0,
                            UsedPoints INT DEFAULT 0,
                            BasicPoints INT DEFAULT 0,
                            UsedMins REAL DEFAULT 0,
                            AvailableMins REAL DEFAULT 480,
                            RegistDatetime DATETIME DEFAULT CURRENT_TIMESTAMP,
                            DeleteFlag BOOLEAN DEFAULT 0
                        );",
                        @"
                        CREATE TABLE IF NOT EXISTS DurationLevel (
                            DurationLevelName TEXT PRIMARY KEY,
                            Points INT NOT NULL
                        );"
                    };

                    foreach (var query in createTableQueries)
                    {
                        connection.Execute(query);
                    }

                    // ??????
                    var insertDataQuery = new[]
                    {
                        @"
                        INSERT OR IGNORE INTO DurationLevel (DurationLevelName, Points) VALUES
                            ('Tiny', 1),
                            ('Small', 2),
                            ('Medium', 3),
                            ('Large', 4),
                            ('Huge', 5),
                            ('-Customize-', 0)
                        ;",
                        @"
                        INSERT OR IGNORE INTO Unit (UnitName) VALUES
                            ('IMD'),
                            ('FA'),
                            ('APP'),
                            ('MECT'),
                            ('METRO'),
                            ('CSO'),
                            ('CSM'),
                            ('AC'),
                            ('AR'),
                            ('PCD')
                        ;",
                    };

                    foreach (var query in insertDataQuery)
                    {
                        connection.Execute(query);
                    }

                    // ?????
                    var createTriggerQuery = @"
                        CREATE TRIGGER IF NOT EXISTS update_TaskHeader_Values
                        AFTER UPDATE OF OverHours, CustomizedMins, UsedPoints ON TaskHeader
                        FOR EACH ROW
                        BEGIN
                            UPDATE TaskHeader
                            SET 
                                TotalHours = NEW.OverHours + 8,
                                TotalMins = (NEW.OverHours + 8) * 60,
                                AvailableMins = (NEW.OverHours + 8) * 60 - NEW.CustomizedMins - NEW.UsedMins,
                                BasicPoints = CASE 
                                                WHEN NEW.UsedPoints != 0 THEN (TotalMins - NEW.CustomizedMins) / NEW.UsedPoints
                                                ELSE 0
                                             END,
                                UsedMins = NEW.UsedPoints * CASE 
                                                              WHEN NEW.UsedPoints != 0 THEN (TotalMins - NEW.CustomizedMins) / NEW.UsedPoints
                                                              ELSE 0
                                                            END
                            WHERE TaskDate = NEW.TaskDate;
                        END;
                    ";

                    connection.Execute(createTriggerQuery);

                    Debug.WriteLine("?????????????????");
                    connection.Close();
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"???????????: {ex.Message}");
            }
        }
    }
}

This is DatabaseInitializer.cs

Based on the above files, solve my requirements. Please answer in Traditional Chinese, prioritizing solutions that reduce system load, with maintainability as secondary. Responses should be clear, concise, and to the point. Since there are many different files, please first provide the file names and present the solutions in a before-and-after comparison format. For both the before and after content, only show the modified sections, no need to display everything. My requirement is:
