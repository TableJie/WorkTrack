using System.Configuration;
using System.Data;
using System.Windows;

namespace WorkTrack
{
    /// <summary>
    /// Interaction logic for App.xaml
    /// </summary>
    public partial class App : Application
    {
        public static readonly string ConnectionString = "Data Source=Database/app.db";
    }

}

This is App.xaml.cs

<Application x:Class="WorkTrack.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:local="clr-namespace:WorkTrack"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <materialDesign:BundledTheme BaseTheme="Light" PrimaryColor="Teal" SecondaryColor="Lime" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesign2.Defaults.xaml" />
                <!--Select colors, options are metrial, metro, orange, blue, black and white-->
                <ResourceDictionary Source="pack://application:,,,/LiveCharts.Wpf;component/Themes/Colors/black.xaml" /> 

                <!--Select size, options are small, medium and large-->
                <ResourceDictionary Source="pack://application:,,,/LiveCharts.Wpf;component/Themes/Size/s.xaml" />

                <!--Select weight, options are light, normal and bold-->
                <ResourceDictionary Source="pack://application:,,,/LiveCharts.Wpf;component/Themes/Weight/light.xaml" />

                <!--Also add the base theme, this is required always-->
                <ResourceDictionary Source="pack://application:,,,/LiveCharts.Wpf;component/Themes/base.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <local:DeleteButtonOpacityConverter x:Key="DeleteButtonOpacityConverter" />

            <sys:Double x:Key="FormElementWidth">180</sys:Double>
            <sys:Double x:Key="FormElementHeight">24</sys:Double>
            
            <Thickness x:Key="FormElementMargin">0,10</Thickness>
            <Thickness x:Key="FormElementPadding">0,5</Thickness>

            
            
        </ResourceDictionary>
    </Application.Resources>
</Application>

This is App.xaml

using System;
using System.Diagnostics;
using System.IO;
using Dapper;
using Microsoft.Data.Sqlite;

namespace WorkTrack
{
    public class DatabaseInitializer
    {
        private readonly string DatabasePath = "Database/app.db"; // ????????DatabasePath???readonly

        public void Initialize()
        {
            try
            {
                string fullPath = Path.Combine(Directory.GetCurrentDirectory(), DatabasePath);

                if (!File.Exists(fullPath))
                {
                    // ?? DirectoryPath ?? null
                    string directoryPath = Path.GetDirectoryName(fullPath);
                    if (directoryPath != null)
                    {
                        Directory.CreateDirectory(directoryPath);
                    }
                    Debug.WriteLine($"???????: {fullPath}");
                }

                using (var connection = new SqliteConnection($"Data Source={fullPath};"))
                {
                    connection.Open();

                    var createTableQueries = new[]
                    {
                    @"
                    CREATE TABLE IF NOT EXISTS TaskBody (
                        TaskID INTEGER PRIMARY KEY AUTOINCREMENT,
                        TaskDate DATE NOT NULL,
                        TaskName TEXT NOT NULL,
                        DurationLevel TEXT,
                        Duration INTEGER,
                        Description TEXT,
                        UnitID INTEGER,
                        ApplicationID INTEGER,
                        RegistDatetime DATETIME DEFAULT CURRENT_TIMESTAMP,
                        DetailFlag BOOLEAN DEFAULT 0,
                        DeleteFlag BOOLEAN DEFAULT 0
                    );",
                    @"
                    CREATE TABLE IF NOT EXISTS Application (
                        ApplicationID INTEGER PRIMARY KEY AUTOINCREMENT,
                        ApplicationName TEXT,
                        ApplicationSubName TEXT,
                        ApplicationStatus TEXT,
                        ApplicationDatetime DATETIME,
                        PCDFlag BOOLEAN DEFAULT 0,
                        UnitID INTEGER,
                        RegistDatetime DATETIME DEFAULT CURRENT_TIMESTAMP,
                        DeleteFlag BOOLEAN DEFAULT 0
                    );",
                    @"
                    CREATE TABLE IF NOT EXISTS Unit (
                        UnitID INTEGER PRIMARY KEY AUTOINCREMENT,
                        UnitName TEXT,
                        RegistDatetime DATETIME DEFAULT CURRENT_TIMESTAMP,
                        DeleteFlag BOOLEAN DEFAULT 0
                    );",
                    @"
                    CREATE TABLE IF NOT EXISTS TaskHeader (
                        TaskDate DATE PRIMARY KEY,
                        OverTime REAL,
                        BasicPoint REAL,
                        Tiny REAL,
                        Small REAL,
                        Median REAL,
                        Large REAL,
                        Huge REAL,
                        RegistDatetime DATETIME DEFAULT CURRENT_TIMESTAMP,
                        DeleteFlag BOOLEAN DEFAULT 0
                    );",
                    @"
                    CREATE TABLE DurationLevel (
                        DurationLevel TEXT PRIMARY KEY,
                        Points INT NOT NULL
                    );"
                };

                    foreach (var query in createTableQueries)
                    {
                        connection.Execute(query);
                    }

                    // ??????
                    var insertDataQuery = new[]
                    {
                    @"
                    INSERT OR IGNORE INTO DurationLevel (DurationLevel, Points) VALUES
                        ('Tiny', 1)
                        ,('Small', 2)
                        ,('Medium', 3)
                        ,('Large', 4)
                        ,('Huge', 5)
                        ,('-Customize-', 6)
                    ;",
                    @"
                    INSERT OR IGNORE INTO Unit (UnitName) VALUES
                        ('IMD')
                        ,('FA')
                        ,('APP')
                        ,('MECT')
                        ,('METRO')
                        ,('CSO')
                        ,('CSM')
                        ,('AC')
                        ,('AR')
                        ,('PCD')
                    ;",
                };

                    foreach (var query in insertDataQuery)
                    {
                        connection.Execute(query);
                    }

                    Debug.WriteLine("?????????????");
                    connection.Close();
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"???????????: {ex.Message}");
            }
        }
    }
}


This is DatabaseInitializer.cs

using Dapper;
using LiveCharts;
using LiveCharts.Wpf;
using Microsoft.Data.Sqlite;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Navigation;

namespace WorkTrack
{
    public partial class MainWindow : Window
    {
        public DateTime TodayDate { get; set; }
        public ChartValues<double> TaskDurations { get; set; } = new ChartValues<double>();
        public SeriesCollection SeriesCollection { get; set; }

        public MainWindow()
        {
            InitializeComponent();
            DataContext = this;
            TodayDate = DateTime.Now;

            MainFrame.NavigationService.Navigate(new Page0_Welcome());

            // ??????
            DatabaseInitializer dbInitializer = new DatabaseInitializer();
            dbInitializer.Initialize();

            // ?? Loaded ??
            Loaded += MainWindow_Loaded;

            // ?????
            TaskDurations = new ChartValues<double>();
            SeriesCollection = new SeriesCollection();
            InitializeStackedColumnChart();
        }
        #region Cd1_Bt
        private void bt_OverTime_Click(object sender, RoutedEventArgs e)
        {
            MainFrame.NavigationService.Navigate(new Page1_Task());
        }

        private void bt_TaskCheck_Click(object sender, RoutedEventArgs e)
        {
            MainFrame.NavigationService.Navigate(new Page1_Task());
        }
        #endregion


        private async Task InitializeStackedColumnChart()
        {
            SeriesCollection.Clear();

            try
            {
                using var connection = new SqliteConnection(App.ConnectionString);
                await connection.OpenAsync();

                var query = "SELECT p1.TaskName ,p1.DurationLevel ,t1.Points ,CAST(p1.Duration as INT) as Duration FROM TaskBody p1 LEFT JOIN DurationLevel t1 on p1.DurationLevel = t1.DurationLevel WHERE DATE(p1.TaskDate) = DATE('now') ORDER BY p1.Duration DESC";
                var tasks = await connection.QueryAsync<TaskBody>(query);

                int taskCount = 0;
                int pointsCount = 0;

                foreach (var task in tasks)
                {
                    taskCount++;
                    pointsCount += task.Points;

                    SeriesCollection.Add(new StackedRowSeries
                    {
                        Values = new ChartValues<double> { task.Duration },
                        StackMode = StackMode.Values,
                        DataLabels = true,
                        Fill = Brushes.Teal,
                        Stroke = Brushes.White,
                        StrokeThickness = 0.5,
                        MaxRowHeight = 20,
                        Title = task.TaskName
                    });
                }

                Card_Label1.Text = taskCount.ToString();
                Card_Label2.Text = pointsCount.ToString();

                var Emptyquery = "SELECT (coalesce((SELECT coalesce(OverTime,0) * 60 FROM TaskHeader WHERE DATE(TaskDate) = DATE('now')),0) + 480 - (SELECT coalesce(sum(Duration),0) FROM TaskBody WHERE DATE(TaskDate) = DATE('now') and not DeleteFlag)) as Duration";
                var durations = await connection.QueryAsync<int>(Emptyquery);

                foreach (var duration in durations)
                {
                    SeriesCollection.Add(new StackedRowSeries
                    {
                        Values = new ChartValues<double> { duration },
                        StackMode = StackMode.Values,
                        DataLabels = true,
                        Fill = Brushes.Gray,
                        Stroke = Brushes.White,
                        StrokeThickness = 0.5,
                        MaxRowHeight = 20,
                        Title = "Empty",
                    });
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to load task durations: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }


        #region Form
        private async void MainWindow_Loaded(object sender, RoutedEventArgs e)
        {
           
            await LoadUnitNames();

        }
        private async void RefreshButton_Click(object sender, RoutedEventArgs e)
        {
            await RefreshTaskBodyAsync();
            await InitializeStackedColumnChart();

            ip_TaskID.Clear();
            ip_TaskName.Clear();
            ip_Describe.Clear();
            ip_DurationLevel.SelectedIndex = 2;
            ip_UnitName.SelectedIndex = 0;
            ip_ApplicationID.SelectedIndex = 0;

        }
        private async Task LoadUnitNames()
        {
            try
            {
                await using var connection = new SqliteConnection(App.ConnectionString);
                await connection.OpenAsync();

                var unitNames = (await connection.QueryAsync<string>("SELECT UnitName FROM Unit")).ToList();
                //unitNames.Insert(0, "-Add-");
                unitNames.Add("-Add-");

                ip_UnitName.ItemsSource = unitNames;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to load unit names: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        private async Task RefreshTaskBodyAsync()
        {
            try
            {
                using var connection = new SqliteConnection(App.ConnectionString);
                await connection.OpenAsync();

                DateTime? taskDate = ip_TaskDate.SelectedDate;
                string taskID = ip_TaskID.Text;
                string taskName = ip_TaskName.Text;
                string description = ip_Describe.Text;
                string durationLevel = ip_DurationLevel.Text;
                int? duration = string.IsNullOrEmpty(ip_Duration.Text) ? (int?)null : int.Parse(ip_Duration.Text);
                string unitID = ip_UnitName.Text;
                string applicationID = ip_ApplicationID.Text;



                if (string.IsNullOrEmpty(taskID))
                {
                    var insertQuery = $$"""
                        INSERT INTO TaskBody (TaskDate, TaskName, DurationLevel, Duration, Description, UnitID, ApplicationID)
                        VALUES (@TaskDate, @TaskName, @DurationLevel, @Duration, @Description, @UnitID, @ApplicationID);
                    """;

                    await connection.ExecuteAsync(insertQuery, new
                    {
                        TaskDate = taskDate,
                        TaskName = taskName,
                        DurationLevel = durationLevel,
                        Duration = duration,
                        Description = description,
                        UnitID = unitID,
                        ApplicationID = applicationID,
                    });
                }
                else
                {
                    var updateQuery = $$"""
                        UPDATE TaskBody
                        SET TaskName = @TaskName, DurationLevel = @DurationLevel, Duration = @Duration, Description = @Description,
                            UnitID = @UnitID, ApplicationID = @ApplicationID
                        WHERE TaskID = @TaskID;
                    """;

                    await connection.ExecuteAsync(updateQuery, new
                    {
                        TaskName = taskName,
                        DurationLevel = durationLevel,
                        Duration = duration,
                        Description = description,
                        UnitID = unitID,
                        ApplicationID = applicationID,
                        TaskID = taskID
                    });
                }

                var insertOrUpdateTaskHeader = $$"""
                    INSERT INTO TaskHeader (TaskDate, OverTime)
                    VALUES (@TaskDate, @OverTime)
                    ON CONFLICT (TaskDate)
                    DO UPDATE SET OverTime = @OverTime;

                    WITH NetMin as (
                	    SELECT (8 + p1.OverTime) * 60 - sum(coalesce(p2.Duration,0)) as NetMin
                	    FROM
                		    TaskHeader p1
                		    LEFT JOIN TaskBody p2
                			    on p1.TaskDate = p2.TaskDate
                			    and not p2.DeleteFlag
                			    and p2.DurationLevel = '-Customize-'
                	    WHERE p1.TaskDate = @TaskDate
                    ),BasicPoint as (
                	    SELECT CAST((SELECT NetMin FROM NetMin) / sum(p2.Points) as INT) as BasicPoint
                	    FROM
                		    TaskBody p1
                		    LEFT JOIN DurationLevel p2 on p1.DurationLevel = p2.DurationLevel
                	    WHERE
                		    not p1.DurationLevel = '-Customize-'
                		    and not p1.DeleteFlag
                		    and p1.TaskDate = @TaskDate
                    ),GetPoint as (
                	    SELECT
                		    p1.TaskID
                		    ,t1.Points * (SELECT BasicPoint FROM BasicPoint) as Points
                	    FROM
                		    TaskBody p1
                		    LEFT JOIN DurationLevel t1 on p1.DurationLevel = t1.DurationLevel
                	    WHERE
                            p1.TaskDate = @TaskDate
                            and not p1.DurationLevel = '-Customize-'
                    )
                    UPDATE TaskBody as p1
                    SET Duration = foo.Points
                    FROM GetPoint foo
                    WHERE
                	    p1.TaskID = foo.TaskID
                	    and p1.TaskDate = @TaskDate
                        and not p1.DurationLevel = '-Customize-'
                
                    ;
                """;

                await connection.ExecuteAsync(insertOrUpdateTaskHeader, new
                {
                    TaskDate = taskDate,
                    OverTime = 0
                });
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to update task body: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }


        }
        private void ip_DurationLevel_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ip_DurationLevel.SelectedItem is ComboBoxItem selectedItem)
            {
                ToggleDurationVisibility(selectedItem.Content.ToString());
            }
        }
        private void ToggleDurationVisibility(string durationLevel)
        {
            if (durationLevel == "-Customize-")
            {
                ip_Duration.Visibility = Visibility.Visible;
            }
            else
            {
                ip_Duration.Visibility = Visibility.Collapsed;
            }
        }
        private void ip_UnitName_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ip_UnitName.SelectedItem != null && ip_UnitName.SelectedItem.ToString() == "-Add-")
            {
                UnitManagement unitManagementWindow = new UnitManagement();
                unitManagementWindow.Closed += UnitManagementWindow_Closed;
                unitManagementWindow.ShowDialog();
            }
        }
        private async void UnitManagementWindow_Closed(object sender, EventArgs e)
        {
            await LoadUnitNames(); // ??????UnitName??
        }
        #endregion




        private void TestButton_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show(ip_DurationLevel.Text);
        }


    }


}
This is MainWindow.xaml.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace WorkTrack
{
    public class TaskBody
    {
        public int TaskID { get; set; }
        public string TaskName { get; set; } = string.Empty; // ?????
        public string Description { get; set; } = string.Empty; // ?????
        public long Duration { get; set; }
        public string UnitID { get; set; } = string.Empty; // ?????
        public string ApplicationID { get; set; } = string.Empty; // ?????
        public string DurationLevel { get; set; } = string.Empty; // ?????
        public int Points { get; set; } = 0;
        public bool DeleteFlag { get; set; }
        public DateTime TaskDate { get; set; }
    }
}
This is TaskBody.cs

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- DataGrid -->
    <Style x:Key="DefaultColumnHeaderStyle" TargetType="DataGridColumnHeader">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Height" Value="25"/>
    </Style>
    <Style x:Key="MainColumnHeaderStyle" TargetType="DataGridColumnHeader">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="10,0,0,0"/>
    </Style>
    <Style x:Key="RowHeaderStyle" TargetType="{x:Type DataGridRowHeader}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
                    <Grid>
                        <Ellipse x:Name="headerEllipse" Fill="#4F9D9D" Width="10" Height="10"/>
                        <TextBlock Text="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=Header}" Foreground="Transparent"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" Value="True">
                            <Setter TargetName="headerEllipse" Property="Fill" Value="#4F9D9D"/>
                            <Setter TargetName="headerEllipse" Property="Stroke" Value="Transparent"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Width" Value="25"/>
    </Style>
    <Style x:Key="RowStyle" TargetType="DataGridRow">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Height" Value="45"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#D1E9E9"/>
                <Setter Property="Foreground" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MainCellStyle" TargetType="DataGridCell">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridCell">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Left" Margin="10,0,0,0"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>
    <Style x:Key="DurationCellStyle" TargetType="DataGridCell">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridCell">
                    <Border BorderBrush="Transparent" BorderThickness="2" Margin="40,10,40,10" CornerRadius="12">
                        <Border Background="LightSteelBlue" CornerRadius="12" x:Name="border">
                            <TextBlock Text="{Binding Duration}" VerticalAlignment="Center" HorizontalAlignment="Center" FontWeight="Bold"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding DurationLevel}" Value="1">
                            <Setter TargetName="border" Property="Background" Value="#edf8b1"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding DurationLevel}" Value="2">
                            <Setter TargetName="border" Property="Background" Value="#c7e9b4"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding DurationLevel}" Value="3">
                            <Setter TargetName="border" Property="Background" Value="#7fcdbb"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding DurationLevel}" Value="4">
                            <Setter TargetName="border" Property="Background" Value="#41b6c4"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding DurationLevel}" Value="5">
                            <Setter TargetName="border" Property="Background" Value="#1d91c0"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding DurationLevel}" Value="6">
                            <Setter TargetName="border" Property="Background" Value="#E0E3DA"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="Black"/>
    </Style>

    <Style x:Key="DefaultCellStyle" TargetType="DataGridCell">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridCell">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="Black"/>
    </Style>

    <PathGeometry x:Key="AscendingArrowGeometry" Figures="M 0 4 L 4 8 L 8 4 Z"/>
    <PathGeometry x:Key="DescendingArrowGeometry" Figures="M 0 -4 L 4 -8 L 8 -4 Z"/>
    <Style x:Key="SortableColumnHeaderStyle" TargetType="DataGridColumnHeader">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridColumnHeader">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="20" />
                        </Grid.ColumnDefinitions>
                        <ContentPresenter Grid.Column="0" VerticalAlignment="Center" />
                        <Path x:Name="SortArrow" Grid.Column="1" Fill="Black" Stretch="Uniform" 
                                  Width="12" Height="12" Margin="5,0,0,0" Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="SortDirection" Value="Ascending">
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="SortArrow" Property="Data" Value="{StaticResource AscendingArrowGeometry}"/>
                        </Trigger>
                        <Trigger Property="SortDirection" Value="Descending">
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="SortArrow" Property="Data" Value="{StaticResource DescendingArrowGeometry}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- ScrollBar Style -->
    <Style x:Key="ScrollBarThumbStyle" TargetType="Thumb">
        <Setter Property="Width" Value="6"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Thumb">
                    <Border Background="Gray" CornerRadius="5"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarRepeatButtonStyle" TargetType="RepeatButton">
        <Setter Property="Width" Value="0"/>
        <Setter Property="Height" Value="0"/>
        <Setter Property="Visibility" Value="Collapsed"/>
    </Style>
    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Width" Value="8"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid Background="Transparent">
                        <Border CornerRadius="5" Background="Transparent">
                            <Track Name="PART_Track" IsDirectionReversed="true">
                                <Track.Thumb>
                                    <Thumb Background="Gray" Style="{StaticResource ScrollBarThumbStyle}" />
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="ScrollBar.LineDownCommand" Style="{StaticResource ScrollBarRepeatButtonStyle}" />
                                </Track.IncreaseRepeatButton>
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="ScrollBar.LineUpCommand" Style="{StaticResource ScrollBarRepeatButtonStyle}" />
                                </Track.DecreaseRepeatButton>
                            </Track>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



</ResourceDictionary>
This is DataGrid.xaml

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    
    <Style x:Key="CardStyle" TargetType="Border">
        <Setter Property="CornerRadius" Value="5"/>
        <Setter Property="BorderBrush" Value="#CCCCCC"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="Padding" Value="10"/>
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect Color="Black" Direction="315" ShadowDepth="5" BlurRadius="10" Opacity="0.5"/>
            </Setter.Value>
        </Setter>
    </Style>
    
</ResourceDictionary>
This is Elements.xaml

<Window x:Class="WorkTrack.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WorkTrack"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        xmlns:lvc="clr-namespace:LiveCharts.Wpf;assembly=LiveCharts.Wpf"
        mc:Ignorable="d"
        Title="MainWindow" Height="600" Width="1000"
        WindowStartupLocation="CenterScreen"
        Background="White"
        FontFamily="Calibri"
        >
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Elements.xaml"/>
                <ResourceDictionary Source="DataGrid.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="200" />
        </Grid.ColumnDefinitions>
        <Grid Grid.Column="0" >
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="390"/>
            </Grid.RowDefinitions>
            <Grid Grid.Row="0" HorizontalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Border Style="{StaticResource CardStyle}" Grid.Column="0" Background="White"> <!--#7AB2B2-->
                    <!-- Card 1 Content -->
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="25"/>
                            <RowDefinition Height="25"/>
                            <RowDefinition Height="25"/>
                            <RowDefinition Height="60"/>
                        </Grid.RowDefinitions>
                            <Grid Grid.Row="0">
                                <StackPanel Orientation="Horizontal" Margin="0,5,0,0">
                                    <Image Source="/icon/edit.png"
                                               Width="20"
                                               Height="20"
                                               Margin="5,0,0,0"
                                               HorizontalAlignment="Center"
                                               VerticalAlignment="Center"/>
                                    <TextBlock Text="TaskView"
                                               Margin="5,0,0,0"
                                               HorizontalAlignment="Center"
                                               VerticalAlignment="Center"
                                               FontSize="20"
                                               FontWeight="Bold"/>
                                </StackPanel>
                            </Grid>
                            <Grid Grid.Row="1">
                                <TextBlock Text="{Binding TodayDate, StringFormat=' {0:yyyy-MM-dd}'}" FontSize="12" Margin="5,10,0,0"/>
                            </Grid>
                            <Grid Grid.Row="2">
                                <StackPanel Orientation="Vertical">
                                <lvc:CartesianChart MinWidth="100" Series="{Binding SeriesCollection}" Margin="0,-15,0,-10" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                    <lvc:CartesianChart.AxisX>
                                        <lvc:Axis Title="" Labels="">
                                            <lvc:Axis.Separator>
                                                <lvc:Separator StrokeThickness="0"/>
                                            </lvc:Axis.Separator>
                                        </lvc:Axis>
                                    </lvc:CartesianChart.AxisX>

                                    <lvc:CartesianChart.AxisY>
                                        <lvc:Axis Title="" Labels="">
                                            <lvc:Axis.Separator>
                                                <lvc:Separator StrokeThickness="0"/>
                                            </lvc:Axis.Separator>
                                        </lvc:Axis>
                                    </lvc:CartesianChart.AxisY>

                                </lvc:CartesianChart>
                            </StackPanel>
                            </Grid>
                            <Grid Grid.Row="3">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                </Grid>
                            <StackPanel Grid.Column="0" Orientation="Vertical">
                                 <StackPanel Orientation="Horizontal" Height="20">
                                     <TextBlock Text="Task Count :"
                                                        FontSize="11"
                                                        Foreground="Gray"
                                                        Margin="5,0,0,0"
                                                        FontWeight="Bold"
                                                        VerticalAlignment="Bottom"
                                                        />
                                     <TextBlock x:Name="Card_Label1"
                                                        Text=""
                                                        FontSize="15"
                                                        Foreground="DarkCyan"
                                                        Margin="5,0,0,0"
                                                        FontWeight="Bold"
                                                        VerticalAlignment="Bottom"
                                                        />
                                 </StackPanel>
                                <StackPanel Orientation="Horizontal" Height="20">
                                    <TextBlock Text="UsedPoints:"
                                                   FontSize="11"
                                                   Foreground="Gray"
                                                   Margin="5,0,0,0"
                                                   FontWeight="Bold"
                                                   VerticalAlignment="Bottom"
                                                   />
                                    <TextBlock x:Name="Card_Label2"
                                                   Text=""
                                                   FontSize="15"
                                                   Foreground="DarkCyan"
                                                   Margin="5,0,0,0"
                                                   FontWeight="Bold"
                                                   VerticalAlignment="Bottom"
                                                   />
                                </StackPanel>

                            </StackPanel>
                               
                                <StackPanel Grid.Column="1" Orientation="Horizontal" VerticalAlignment="Bottom" HorizontalAlignment="Right">
                                        <Button Width="30" Height="30" Padding="-5,0" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Click="bt_OverTime_Click" Tag="{Binding UnitID}" Style="{StaticResource MaterialDesignFlatButton}">
                                            <Viewbox Width="15" Height="15" Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center">
                                            <Image Source="/icon/time-add_c.png" RenderOptions.BitmapScalingMode="HighQuality"/>
                                            </Viewbox>
                                        </Button>
                                        <Button Width="30" Height="30" Padding="-5,0" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Click="bt_TaskCheck_Click" Tag="{Binding UnitID}" Style="{StaticResource MaterialDesignFlatButton}">
                                            <Viewbox Width="15" Height="15" Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center">
                                            <Image Source="/icon/angle-circle-right_c.png" RenderOptions.BitmapScalingMode="HighQuality"/>
                                            </Viewbox>
                                        </Button>
                                </StackPanel>
                            </Grid>
                    </Grid>
                    
                </Border>

                <Border Style="{StaticResource CardStyle}" Grid.Column="1" Background="#4D869C">
                    <!-- Card 2 Content -->
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="30"/>
                            <RowDefinition Height="300"/>
                            <RowDefinition Height="20"/>
                        </Grid.RowDefinitions>
                        <Grid Grid.Row="0">
                            <StackPanel Orientation="Horizontal">
                                <Image Source="/icon/edit.png"
                                               Width="20"
                                               Height="20"
                                               Margin="10,0,0,0"
                                               HorizontalAlignment="Center"
                                               VerticalAlignment="Center"/>
                                <TextBlock Text="TaskView"
                                               Margin="5,0,0,0"
                                               HorizontalAlignment="Center"
                                               VerticalAlignment="Center"
                                               FontSize="20"
                                               FontWeight="Bold"/>
                            </StackPanel>
                        </Grid>
                        <Grid Grid.Row="1">

                        </Grid>
                    </Grid>
                </Border>

                <Border Style="{StaticResource CardStyle}" Grid.Column="2" Background="#CDE8E5">
                    <!-- Card 3 Content -->
                    <StackPanel>
                        <TextBlock Text="Index 3" HorizontalAlignment="Left" VerticalAlignment="Center" FontSize="18" FontWeight="Bold"/>
                        <TextBlock Text="" />
                        <TextBlock Text="Index 3 Content" HorizontalAlignment="Left" VerticalAlignment="Center"  FontSize="10"/>
                    </StackPanel>
                </Border>

            </Grid>

            <Frame x:Name="MainFrame" Grid.Row="1" HorizontalAlignment="Stretch" NavigationUIVisibility="Hidden"/>

        </Grid>

        <Grid Grid.Column="1">
            <StackPanel x:Name="MainForm">

                <TextBlock Text="Task View" HorizontalAlignment="Left" VerticalAlignment="Center" FontSize="18" FontWeight="Bold" Margin="0,10,0,0"/>

                <DatePicker x:Name="ip_TaskDate"
                    Style="{StaticResource MaterialDesignFloatingHintDatePicker}"
                    Width="180"
                    Padding="0,5"
                    Margin="5,10"
                    materialDesign:HintAssist.Hint="TaskDate"
                    materialDesign:HintAssist.FloatingOffset="0,-12" FirstDayOfWeek="Monday" SelectedDateFormat="Short"
                />


                <TextBox x:Name="ip_TaskID"
                         Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                         Width="{StaticResource FormElementWidth}"
                         Padding="{StaticResource FormElementPadding}"
                         Margin="{StaticResource FormElementMargin}"
                         materialDesign:HintAssist.Hint="TaskID"
                         materialDesign:HintAssist.FloatingOffset="0,-12"
                />

                <TextBox x:Name="ip_TaskName"
                         Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                         Width="{StaticResource FormElementWidth}"
                         Padding="{StaticResource FormElementPadding}"
                         Margin="{StaticResource FormElementMargin}"
                         materialDesign:HintAssist.Hint="TaskName"
                         materialDesign:HintAssist.FloatingOffset="0,-12"
                         materialDesign:TextFieldAssist.HasClearButton="True"
                />

                <TextBox x:Name="ip_Describe"
                         Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                         Width="{StaticResource FormElementWidth}"
                         Padding="{StaticResource FormElementPadding}"
                         Margin="{StaticResource FormElementMargin}"
                         materialDesign:HintAssist.Hint="Describe"
                         materialDesign:HintAssist.FloatingOffset="0,-12"
                         materialDesign:TextFieldAssist.HasClearButton="True"
                />

                <ComboBox x:Name="ip_DurationLevel"
                          Style="{StaticResource MaterialDesignFloatingHintComboBox}"
                          Width="{StaticResource FormElementWidth}"
                          Padding="{StaticResource FormElementPadding}"
                          Margin="{StaticResource FormElementMargin}"
                          materialDesign:HintAssist.Hint="DurationLevel"
                          materialDesign:HintAssist.FloatingOffset="0,-12"
                          SelectionChanged="ip_DurationLevel_SelectionChanged"
                          >
                    <ComboBoxItem Content="Tiny" Tag="1" />
                    <ComboBoxItem Content="Small" Tag="2" />
                    <ComboBoxItem Content="Medium" Tag="3" />
                    <ComboBoxItem Content="Large" Tag="4" />
                    <ComboBoxItem Content="Huge" Tag="5" />
                    <ComboBoxItem Content="-Customize-" Tag="6" FontWeight="Bold" Foreground="#4D869C" />
                </ComboBox>


                <TextBox x:Name="ip_Duration"
                         Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                         Width="{StaticResource FormElementWidth}"
                         Padding="{StaticResource FormElementPadding}"
                         Margin="{StaticResource FormElementMargin}"
                         materialDesign:HintAssist.Hint="Duration"
                         materialDesign:HintAssist.FloatingOffset="0,-12"
                         materialDesign:TextFieldAssist.HasClearButton="True"
                         Visibility="Collapsed"
                />

                <ComboBox x:Name="ip_UnitName"
                          Style="{StaticResource MaterialDesignFloatingHintComboBox}"
                          Width="{StaticResource FormElementWidth}"
                          Padding="{StaticResource FormElementPadding}"
                          Margin="{StaticResource FormElementMargin}"
                          materialDesign:HintAssist.Hint="UnitName"
                          materialDesign:HintAssist.FloatingOffset="0,-12"
                          SelectionChanged="ip_UnitName_SelectionChanged"
                          >
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}">
                                        <TextBlock.Style>
                                            <Style TargetType="TextBlock">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding}" Value="-Add-">
                                                        <Setter Property="Foreground" Value="#4D869C" />
                                                        <Setter Property="FontWeight" Value="Bold" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBlock.Style>
                                    </TextBlock>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                </ComboBox>

                <ComboBox x:Name="ip_ApplicationID"
                          Style="{StaticResource MaterialDesignFloatingHintComboBox}"
                          Width="{StaticResource FormElementWidth}"
                          Padding="{StaticResource FormElementPadding}"
                          Margin="{StaticResource FormElementMargin}"
                          materialDesign:HintAssist.Hint="ApplicationID"
                          materialDesign:HintAssist.FloatingOffset="0,-12"/>
                <Button x:Name ="bt_Refresh"
                        Style="{StaticResource MaterialDesignFlatButton}"
                        Width="{StaticResource FormElementWidth}"
                        Padding="{StaticResource FormElementPadding}"
                        Margin="{StaticResource FormElementMargin}"
                        materialDesign:ButtonAssist.CornerRadius="20"
                        Content="Refresh"
                        HorizontalAlignment="Left"
                        Click="RefreshButton_Click"/>
                <Button x:Name ="bt_Exist"
                        Style="{StaticResource MaterialDesignFlatButton}"
                        Width="{StaticResource FormElementWidth}"
                        Padding="{StaticResource FormElementPadding}"
                        Margin="{StaticResource FormElementMargin}"
                        materialDesign:ButtonAssist.CornerRadius="20"
                        Content="Exist"
                        HorizontalAlignment="Left"
                        Click="RefreshButton_Click"/>

                <Button x:Name ="bt_Test"
                        Style="{StaticResource MaterialDesignFlatButton}"
                        Width="{StaticResource FormElementWidth}"
                        Padding="{StaticResource FormElementPadding}"
                        Margin="{StaticResource FormElementMargin}"
                        materialDesign:ButtonAssist.CornerRadius="20"
                        Content="Test"
                        HorizontalAlignment="Left"
                        Click="TestButton_Click"
                />
            </StackPanel>
        </Grid>
    </Grid>
</Window>

This is MainWindow.xaml

<Application x:Class="WorkTrack.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:local="clr-namespace:WorkTrack"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <materialDesign:BundledTheme BaseTheme="Light" PrimaryColor="Teal" SecondaryColor="Lime" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesign2.Defaults.xaml" />
                <!--Select colors, options are metrial, metro, orange, blue, black and white-->
                <ResourceDictionary Source="pack://application:,,,/LiveCharts.Wpf;component/Themes/Colors/black.xaml" /> 

                <!--Select size, options are small, medium and large-->
                <ResourceDictionary Source="pack://application:,,,/LiveCharts.Wpf;component/Themes/Size/s.xaml" />

                <!--Select weight, options are light, normal and bold-->
                <ResourceDictionary Source="pack://application:,,,/LiveCharts.Wpf;component/Themes/Weight/light.xaml" />

                <!--Also add the base theme, this is required always-->
                <ResourceDictionary Source="pack://application:,,,/LiveCharts.Wpf;component/Themes/base.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <local:DeleteButtonOpacityConverter x:Key="DeleteButtonOpacityConverter" />

            <sys:Double x:Key="FormElementWidth">180</sys:Double>
            <sys:Double x:Key="FormElementHeight">24</sys:Double>
            
            <Thickness x:Key="FormElementMargin">0,10</Thickness>
            <Thickness x:Key="FormElementPadding">0,5</Thickness>

            
            
        </ResourceDictionary>
    </Application.Resources>
</Application>

This is App.xaml

<Window x:Class="WorkTrack.UnitManagement"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        mc:Ignorable="d"
        Title="Unit Management" Height="500" Width="400"
        WindowStartupLocation="CenterScreen"
        Background="White"
        FontFamily="Calibri">
    <Grid>

        <Grid.RowDefinitions>
            <RowDefinition Height="40"/>
            <RowDefinition Height="45"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <Grid Grid.Row="0" HorizontalAlignment="Stretch">
            <TextBlock Text="Unit Management"
                       HorizontalAlignment="Left"
                       VerticalAlignment="Center"
                       FontSize="18"
                       FontWeight="Bold"
                       Margin="10"
            />
        </Grid>
        <Grid Grid.Row="1" HorizontalAlignment="Stretch">
            <StackPanel x:Name="Unit_InputForm" Orientation="Horizontal">

                <TextBox Name="ip_UnitName"
                     Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                     Width="{StaticResource FormElementWidth}"
                     Height="{StaticResource FormElementHeight}"
                     Padding="0"
                     Margin="10"                    
                     materialDesign:HintAssist.Hint="Input New UnitName Here"
                     materialDesign:HintAssist.FloatingOffset="0,-12"
                     materialDesign:TextFieldAssist.HasClearButton="True"
                />

                <Button Name ="bt_SaveUnit"
                    Style="{StaticResource MaterialDesignFlatButton}"
                    Width="60"
                    Height="{StaticResource FormElementHeight}"
                    Margin="10"
                    materialDesign:ButtonAssist.CornerRadius="20"
                    Content="Add"
                    HorizontalAlignment="Left"
                    Click="bt_SaveUnit_Click"
                />


            </StackPanel>


        </Grid>

        <Grid Grid.Row="2" HorizontalAlignment="Stretch">
            <StackPanel x:Name="Unit_UnitData" Margin="10">

                <DataGrid Name="dt_Unit" AutoGenerateColumns="False">
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="UnitName" Binding="{Binding UnitName}" Width="160" SortMemberPath="UnitName"/>
                        <DataGridTemplateColumn Header="Action" Width="*" >
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Button Click="DeleteButton_Click" Tag="{Binding UnitID}" Style="{StaticResource MaterialDesignFlatButton}" Width="40" HorizontalAlignment="Left">
                                        <Image Source="/icon/delete.png" 
                                               Width="25" 
                                               Height="20"
                                               HorizontalAlignment="Center"
                                               VerticalAlignment="Center"
                                               Opacity="{Binding DeleteFlag, Converter={StaticResource DeleteButtonOpacityConverter}}"/>
                                    </Button>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                    </DataGrid.Columns>
                </DataGrid>


            </StackPanel>
           
        </Grid>
    </Grid>
</Window>

This is UnitManagement.xaml

using System;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using Dapper;
using Microsoft.Data.Sqlite;

namespace WorkTrack
{

    public class Unit
    {
        public int UnitID { get; set; }
        public string UnitName { get; set; } = string.Empty; // ?????
        public DateTime RegistDatetime { get; set; }
        public bool DeleteFlag { get; set; }
    }

    public partial class UnitManagement : Window
    {
        public UnitManagement()
        {
            InitializeComponent();
            LoadUnitData();
        }

        private async void LoadUnitData()
        {
            try
            {
                await using var connection = new SqliteConnection(App.ConnectionString);
                await connection.OpenAsync();
                var units = (await connection.QueryAsync<Unit>("SELECT * FROM Unit")).ToList();
                dt_Unit.ItemsSource = units;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to load units: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private async void bt_SaveUnit_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                string unitName = ip_UnitName.Text;

                if (string.IsNullOrEmpty(unitName))
                {
                    MessageBox.Show("Unit Name cannot be empty.", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }

                await using var connection = new SqliteConnection(App.ConnectionString);
                await connection.OpenAsync();
                var insertQuery = "INSERT INTO Unit (UnitName) VALUES (@UnitName)";
                await connection.ExecuteAsync(insertQuery, new { UnitName = unitName });

                MessageBox.Show("Unit saved successfully.", "Info", MessageBoxButton.OK, MessageBoxImage.Information);
                LoadUnitData(); // ????????
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to save unit: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private async void DeleteButton_Click(object sender, RoutedEventArgs e)
        {
            if (sender is Button button && button.Tag is int unitId)
            {
                var result = MessageBox.Show("??????????", "????", MessageBoxButton.YesNo, MessageBoxImage.Warning);
                if (result == MessageBoxResult.Yes)
                {
                    try
                    {
                        await using var connection = new SqliteConnection(App.ConnectionString);
                        await connection.OpenAsync();

                        var deleteQuery = "UPDATE Unit SET DeleteFlag = 1 WHERE UnitID = @UnitID";
                        await connection.ExecuteAsync(deleteQuery, new { UnitID = unitId });

                        MessageBox.Show("?????", "??", MessageBoxButton.OK, MessageBoxImage.Information);
                        LoadUnitData(); // ??????
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"????: {ex.Message}", "??", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
        }


    }




}

This is UnitManagement.xaml.cs

using Microsoft.Data.Sqlite;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using Dapper;

namespace WorkTrack
{
    /// <summary>
    /// Page1.xaml ?????
    /// </summary>
    public partial class Page1_Task : Page
    {
        public Page1_Task()
        {
            InitializeComponent();
            ip_TaskDate.SelectedDate = DateTime.Today;
            DefaultSearch_TaskBody();

        }

        private async Task DefaultSearch_TaskBody()
        {
            try
            {
                DateTime? selectedDate = ip_TaskDate.SelectedDate;

                if (selectedDate == null)
                {
                    MessageBox.Show("??????", "??", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }

                await using var connection = new SqliteConnection(App.ConnectionString);
                await connection.OpenAsync();

                var taskBodyData = (await connection.QueryAsync<TaskBody>(
                    "SELECT p1.*, t1.UnitName FROM TaskBody p1 LEFT JOIN Unit t1 ON p1.UnitID = t1.UnitID WHERE TaskDate = @TaskDate",
                    new { TaskDate = selectedDate.Value.Date }
                )).ToList();

                if (this.FindName("dt_TaskBody") is DataGrid dt_TaskBody)
                {
                    dt_TaskBody.ItemsSource = taskBodyData;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to load task body: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }


        private void DeleteButton_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("Delete");
        }

        private void EditButton_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("Edit");
        }

        private void DetailButton_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("Detail");
        }
    }

}

This is Page1_Task.xaml.cs

<Page x:Class="WorkTrack.Page1_Task"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:WorkTrack"
      xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
      mc:Ignorable="d" 
      d:DesignHeight="450" d:DesignWidth="800"
      FontFamily="TimeNewsRoman"
      Title="Page1_Task">

    <Page.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Elements.xaml"/>
                <ResourceDictionary Source="DataGrid.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Page.Resources>

    <Grid HorizontalAlignment="Stretch">
        <Border Style="{StaticResource CardStyle}" Background="#F3F3F3">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="40" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>

                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="TaskList" Grid.Column="0"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                FontSize="18"
                                FontWeight="Bold"
                                Margin="5,0,0,0"
                                />
                    <StackPanel Orientation="Horizontal" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Right">
                        <DatePicker x:Name="ip_TaskDate"
                                        Style="{StaticResource MaterialDesignFloatingHintDatePicker}"
                                        Width="80"
                                        Height="30"
                                        Margin="5,-10,5,0"
                                        VerticalAlignment="Center"
                                        materialDesign:HintAssist.Hint="TaskDate"
                                        materialDesign:HintAssist.FloatingOffset="0,-12" FirstDayOfWeek="Monday" SelectedDateFormat="Short"
                        />
                        <Button x:Name="bt_TaskAdd" Width="30" Padding="-5,0" Margin="0" Click="DetailButton_Click" Tag="{Binding UnitID}" Style="{StaticResource MaterialDesignFlatButton}">
                            <Viewbox Width="15" Height="15" Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Image Source="/icon/add_c.png" RenderOptions.BitmapScalingMode="HighQuality"/>
                            </Viewbox>
                        </Button>
                    </StackPanel>
                </Grid>

                <DataGrid x:Name="dt_TaskBody" Grid.Row="1"
                            AutoGenerateColumns="False"
                            CanUserAddRows="False"
                            CanUserDeleteRows="False"
                            IsReadOnly="True"
                            SelectionUnit="FullRow"
                            BorderThickness="0"
                            Background="White"
                            Margin="5"
                            ColumnHeaderHeight="40"
                            RowHeight="35"
                            Style="{StaticResource MaterialDesignDataGrid}">
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="TaskName" Binding="{Binding TaskName}" Width="120" SortMemberPath="TaskName"/>
                        <DataGridTextColumn Header="Description" Binding="{Binding Description}" Width="*" SortMemberPath="Description"/>
                        <DataGridTextColumn Header="Duration" Binding="{Binding Duration}" Width="*" SortMemberPath="Duration" />
                        <DataGridTextColumn Header="UnitName" Binding="{Binding UnitName}" Width="*" SortMemberPath="UnitName"/>
                        <DataGridTemplateColumn Header="Action" Width="*" >
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                                        <Button Width="30" Height="30" Padding="-5,0" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center"  Click="DetailButton_Click" Tag="{Binding UnitID}" Style="{StaticResource MaterialDesignFlatButton}">
                                            <Viewbox Width="15" Height="15" Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center">
                                                <Image Source="/icon/file-edit.png" RenderOptions.BitmapScalingMode="HighQuality"/>
                                            </Viewbox>
                                        </Button>
                                        <Button Width="30" Height="30" Padding="-5,0" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Click="DeleteButton_Click" Tag="{Binding UnitID}" Style="{StaticResource MaterialDesignFlatButton}">
                                            <Viewbox Width="15" Height="15" Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center">
                                                <Image Source="/icon/cross-small.png" RenderOptions.BitmapScalingMode="HighQuality"/>
                                            </Viewbox>
                                        </Button>
                                    </StackPanel>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                    </DataGrid.Columns>
                </DataGrid>
            </Grid>
        </Border>
    </Grid>
</Page>

This is Page1_Task.xaml

File WorkTrack.csporj does not exist

Based on the above files, solve my requirements. Please answer in Traditional Chinese, prioritizing solutions that reduce system load, with maintainability as secondary. Responses should be clear, concise, and to the point. Since there are many different files, please first provide the file names and present the solutions in a before-and-after comparison format. For both the before and after content, only show the modified sections, no need to display everything. My requirement is:
