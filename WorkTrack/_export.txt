<Window x:Class="WorkTrack.InputTask"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        xmlns:local="clr-namespace:WorkTrack"
        mc:Ignorable="d"
        Title="InputTask" Height="480" Width="250">
    
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Elements.xaml"/>
                <ResourceDictionary Source="DataGrid.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>
    
    <Grid>
        <StackPanel x:Name="MainForm" Margin="10,15">

            <DatePicker x:Name="ip_TaskDate"
                    Style="{StaticResource MaterialDesignFloatingHintDatePicker}"
                    Width="180"
                    Padding="0,5"
                    Margin="5,10"
                    materialDesign:HintAssist.Hint="TaskDate"
                    materialDesign:HintAssist.FloatingOffset="0,-12" FirstDayOfWeek="Monday" SelectedDateFormat="Short"
                />

            <TextBox x:Name="ip_TaskID"
                         Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                         Width="{StaticResource FormElementWidth}"
                         Padding="{StaticResource FormElementPadding}"
                         Margin="{StaticResource FormElementMargin}"
                         materialDesign:HintAssist.Hint="TaskID"
                         materialDesign:HintAssist.FloatingOffset="0,-12"
                />

            <TextBox x:Name="ip_TaskName"
                         Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                         Width="{StaticResource FormElementWidth}"
                         Padding="{StaticResource FormElementPadding}"
                         Margin="{StaticResource FormElementMargin}"
                         materialDesign:HintAssist.Hint="TaskName"
                         materialDesign:HintAssist.FloatingOffset="0,-12"
                         materialDesign:TextFieldAssist.HasClearButton="True"
                />

            <TextBox x:Name="ip_Describe"
                         Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                         Width="{StaticResource FormElementWidth}"
                         Padding="{StaticResource FormElementPadding}"
                         Margin="{StaticResource FormElementMargin}"
                         materialDesign:HintAssist.Hint="Describe"
                         materialDesign:HintAssist.FloatingOffset="0,-12"
                         materialDesign:TextFieldAssist.HasClearButton="True"
                />

            <ComboBox x:Name="ip_DurationLevelName"
                      Style="{StaticResource MaterialDesignFloatingHintComboBox}"
                      Width="{StaticResource FormElementWidth}"
                      Padding="{StaticResource FormElementPadding}"
                      Margin="{StaticResource FormElementMargin}"
                      materialDesign:HintAssist.Hint="DurationLevelName"
                      materialDesign:HintAssist.FloatingOffset="0,-12"
                      SelectedValuePath="DurationLevelID"
                      SelectionChanged="ip_DurationLevelName_SelectionChanged"
                      >
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding DurationLevelName}">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding DurationLevelName}" Value="-Customize-">
                                            <Setter Property="Foreground" Value="#4D869C" />
                                            <Setter Property="FontWeight" Value="Bold" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>


            <TextBox x:Name="ip_Duration"
                     Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                     Width="{StaticResource FormElementWidth}"
                     Padding="{StaticResource FormElementPadding}"
                     Margin="{StaticResource FormElementMargin}"
                     materialDesign:HintAssist.Hint="Duration"
                     materialDesign:HintAssist.FloatingOffset="0,-12"
                     materialDesign:TextFieldAssist.HasClearButton="True"
                     Visibility="Collapsed"
                />

            <ComboBox x:Name="ip_UnitName"
                      Style="{StaticResource MaterialDesignFloatingHintComboBox}"
                      Width="{StaticResource FormElementWidth}"
                      Padding="{StaticResource FormElementPadding}"
                      Margin="{StaticResource FormElementMargin}"
                      materialDesign:HintAssist.Hint="UnitName"
                      materialDesign:HintAssist.FloatingOffset="0,-12"
                      SelectedValuePath="UnitID"
                      SelectionChanged="ip_UnitName_SelectionChanged"
                      >
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding UnitName}">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding UnitName}" Value="-Add-">
                                            <Setter Property="Foreground" Value="#4D869C" />
                                            <Setter Property="FontWeight" Value="Bold" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>

            <ComboBox x:Name="ip_ApplicationID"
                          Style="{StaticResource MaterialDesignFloatingHintComboBox}"
                          Width="{StaticResource FormElementWidth}"
                          Padding="{StaticResource FormElementPadding}"
                          Margin="{StaticResource FormElementMargin}"
                          materialDesign:HintAssist.Hint="ApplicationID"
                          materialDesign:HintAssist.FloatingOffset="0,-12"/>

            <Button x:Name ="bt_Refresh"
                        Style="{StaticResource MaterialDesignFlatButton}"
                        Width="{StaticResource FormElementWidth}"
                        Padding="{StaticResource FormElementPadding}"
                        Margin="0,5,0,0"
                        materialDesign:ButtonAssist.CornerRadius="20"
                        HorizontalAlignment="Center"
                        Content="Refresh"
                        Click="RefreshButton_Click"
                        />
            <Button x:Name ="bt_Close"
                        Style="{StaticResource MaterialDesignFlatButton}"
                        Width="{StaticResource FormElementWidth}"
                        Padding="{StaticResource FormElementPadding}"
                        Margin="0,5,0,0"
                        materialDesign:ButtonAssist.CornerRadius="20"
                        HorizontalAlignment="Center"
                        Content="Close"
                        />
            <ToggleButton
                      materialDesign:ToggleButtonAssist.OnContent="{materialDesign:PackIcon Kind=BookCancel}"
                      Content="{materialDesign:PackIcon Kind=Book}"
                      Style="{StaticResource MaterialDesignActionToggleButton}"
            />

        </StackPanel>
    </Grid>
</Window>

This is InputTask.xaml

using Dapper;
using LiveCharts.Wpf;
using LiveCharts;
using Microsoft.Data.Sqlite;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Data;

namespace WorkTrack
{
    /// <summary>
    /// InputTask.xaml ?????
    /// </summary>
    public partial class InputTask : Window
    {
        private readonly TaskBody _taskBody;
        private readonly bool _isCopyMode;

        public enum TaskInitializationMode
        {
            Add,    // ??????
            Edit,   // ????????
            Copy    // ????????
        }

        public InputTask(TaskBody taskBody, TaskInitializationMode initializationMode)
        {
            InitializeComponent();
            _taskBody = taskBody;
            _isCopyMode = initializationMode == TaskInitializationMode.Copy;

            Loaded += MainWindow_Loaded;
        }

        private async void MainWindow_Loaded(object sender, RoutedEventArgs e)
        {
            await LoadOption();

            // ?????
            ip_TaskDate.SelectedDate = _taskBody.TaskDate != DateTime.MinValue ? _taskBody.TaskDate : DateTime.Today;
            ip_TaskName.Text = _taskBody.TaskName;
            ip_Describe.Text = _taskBody.Description;
            ip_DurationLevelName.SelectedValue = _taskBody.DurationLevelID != 0 ? _taskBody.DurationLevelID : ip_DurationLevelName.Items[2];
            ip_Duration.Text = _taskBody.Duration.ToString();
            ip_UnitName.SelectedValue = _taskBody.UnitID != 0 ? _taskBody.UnitID : ip_UnitName.Items[0];
            ip_ApplicationID.Text = _taskBody.ApplicationID?.ToString();

            // ??????????? TaskID ?????
            this.Title = _isCopyMode ? "Copy Task" : _taskBody.TaskID == 0 ? "Add Task" : "Change Task";
            ip_TaskID.Visibility = _taskBody.TaskID == 0 || _isCopyMode ? Visibility.Collapsed : Visibility.Visible;
            if (!_isCopyMode && _taskBody.TaskID != 0)
            {
                ip_TaskID.Text = _taskBody.TaskID.ToString();
            }
        }

        private async Task LoadOption()
        {
            try
            {
                await using var connection = new SqliteConnection(App.ConnectionString);
                await connection.OpenAsync();

                // ?? UnitNames ??
                var unitNames = (await connection.QueryAsync<Unit>("SELECT UnitID, UnitName FROM Unit")).ToList();
                unitNames.Add(new Unit { UnitID = 0, UnitName = "-Add-" });
                ip_UnitName.ItemsSource = unitNames;
                ip_UnitName.SelectedIndex = 0;

                // ?? DurationLevels ??
                var durationLevelNames = (await connection.QueryAsync<DurationLevel>("SELECT DurationLevelID, DurationLevelName FROM DurationLevel")).ToList();
                ip_DurationLevelName.ItemsSource = durationLevelNames;
                ip_DurationLevelName.SelectedIndex = 2;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"?????????: {ex.Message}", "??", MessageBoxButton.OK, MessageBoxImage.Error);
            }

        }

        private void ip_UnitName_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ip_UnitName.SelectedItem != null && ip_UnitName.SelectedItem.ToString() == "-Add-")
            {
                UnitManagement unitManagementWindow = new UnitManagement();
                unitManagementWindow.Closed += UnitManagementWindow_Closed;
                unitManagementWindow.ShowDialog();
            }
        }
        private async void UnitManagementWindow_Closed(object sender, EventArgs e)
        {
            await LoadOption(); // ??????UnitName??
        }
        private void ip_DurationLevelName_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ip_DurationLevelName.SelectedItem is ComboBoxItem selectedItem)
            {
                ToggleDurationVisibility(selectedItem.Content.ToString());
            }
        }
        private void ToggleDurationVisibility(string durationLevel)
        {
            if (durationLevel == "-Customize-")
            {
                ip_Duration.Visibility = Visibility.Visible;
            }
            else
            {
                ip_Duration.Visibility = Visibility.Collapsed;
            }
        }

        private async Task RefreshTaskBodyAsync()
        {
            try
            {
                using var connection = new SqliteConnection(App.ConnectionString);
                await connection.OpenAsync();

                DateTime? taskDate = ip_TaskDate.SelectedDate;
                string taskID = ip_TaskID.Text;
                string taskName = ip_TaskName.Text;
                string description = ip_Describe.Text;
                int durationLevelID = (int)ip_DurationLevelName.SelectedValue;
                int? duration = string.IsNullOrEmpty(ip_Duration.Text) ? (int?)null : int.Parse(ip_Duration.Text);
                int selectedUnitID = (int)ip_UnitName.SelectedValue;
                string applicationID = ip_ApplicationID.Text;


                if (string.IsNullOrEmpty(taskID))
                {
                    var insertQuery = $$"""
                        INSERT INTO TaskBody (TaskDate, TaskName, DurationLevelID, Duration, Description, UnitID, ApplicationID)
                        VALUES (@TaskDate, @TaskName, @DurationLevelID, @Duration, @Description, @UnitID, @ApplicationID);
                    """;

                    await connection.ExecuteAsync(insertQuery, new
                    {
                        TaskDate = taskDate,
                        TaskName = taskName,
                        DurationLevelID = durationLevelID,
                        Duration = duration,
                        Description = description,
                        UnitID = selectedUnitID,
                        ApplicationID = applicationID,
                    });
                }
                else
                {
                    var updateQuery = $$"""
                        UPDATE TaskBody
                        SET TaskName = @TaskName, DurationLevelID = @DurationLevelID, Duration = @Duration, Description = @Description,
                            UnitID = @UnitID, ApplicationID = @ApplicationID
                        WHERE TaskID = @TaskID;
                    """;

                    await connection.ExecuteAsync(updateQuery, new
                    {
                        TaskName = taskName,
                        DurationLevelID = durationLevelID,
                        Duration = duration,
                        Description = description,
                        UnitID = selectedUnitID,
                        ApplicationID = applicationID,
                        TaskID = taskID
                    });
                }

                var insertOrUpdateTaskHeader = $$"""
                   

                    WITH CTE AS (
                        SELECT 
                            sum(CASE WHEN DurationLevelID != 0 THEN DurationLevelID END) as UsedPoints
                            ,sum(CASE WHEN DurationLevelID = 0 THEN Duration END) as CustomizedMins
                        FROM TaskBody
                        WHERE TaskDate = @TaskDate
                    )
                    UPDATE TaskHeader
                    SET
                        UsedPoints = coalesce(CTE.UsedPoints, 0)
                        ,CustomizedMins = coalesce(CTE.CustomizedMins, 0)
                    FROM CTE
                    WHERE TaskHeader.TaskDate = @TaskDate
                    ;

                    UPDATE TaskBody
                    SET Duration = CAST(durationLevelID * (SELECT BasicPoints FROM TaskHeader WHERE TaskDate = @TaskDate) AS INTEGER)
                    WHERE
                        durationLevelID != 0
                        and TaskDate = @TaskDate
                    ;
                """;

                await connection.ExecuteAsync(insertOrUpdateTaskHeader, new{TaskDate = taskDate});
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to update task body: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }

        }
        private async void RefreshButton_Click(object sender, RoutedEventArgs e)
        {
            await RefreshTaskBodyAsync();

            ip_TaskID.Clear();
            ip_TaskName.Clear();
            ip_Describe.Clear();
            ip_DurationLevelName.SelectedIndex = 2;
            ip_UnitName.SelectedIndex = 0;
            ip_ApplicationID.SelectedIndex = 0;

            var mainWindow = Application.Current.MainWindow as MainWindow;
            if (mainWindow != null)
            {
                var selectedDate = ip_TaskDate.SelectedDate ?? DateTime.Now;
                await mainWindow.InitializeStackedColumnChart(selectedDate);


                if (mainWindow.MainFrame.Content is Page1_Task page1Task)
                {
                    await page1Task.DefaultSearch_TaskBody(); // ?? Page1_Task ? DataGrid
                }
            }
        }

    }


}

This is InputTask.xaml.cs

<Page x:Class="WorkTrack.Page1_Task"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:WorkTrack"
      xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
      mc:Ignorable="d" 
      d:DesignHeight="450" d:DesignWidth="800"
      FontFamily="TimeNewsRoman"
      Title="Page1_Task">

    <Page.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Elements.xaml"/>
                <ResourceDictionary Source="DataGrid.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Page.Resources>

    <Grid HorizontalAlignment="Stretch">
        <Border Style="{StaticResource CardStyle}" Background="#F3F3F3">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="40" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>

                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="TaskList" Grid.Column="0"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                FontSize="18"
                                FontWeight="Bold"
                                Margin="5,0,0,0"
                                />
                    <StackPanel Orientation="Horizontal" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Right">
                        <DatePicker x:Name="ip_TaskDate"
                                    Style="{StaticResource MaterialDesignFloatingHintDatePicker}"
                                    Width="90"
                                    Height="30"
                                    Margin="5,-10,5,0"
                                    VerticalAlignment="Center"
                                    materialDesign:HintAssist.Hint="TaskDate"
                                    materialDesign:HintAssist.FloatingOffset="0,-12"
                                    FirstDayOfWeek="Monday"
                                    SelectedDateFormat="Short"
                                    SelectedDateChanged="ip_TaskDate_SelectedDateChanged"
                        />
                        <Button x:Name="bt_TaskAdd" Width="30" Padding="-5,0" Margin="0" Click="ActionButton_Click" Tag="Add" Style="{StaticResource MaterialDesignFlatButton}">
                            <materialDesign:PackIcon Kind="ClipboardPlusOutline" 
                                                             Width="20" 
                                                             Height="20" 
                                                             Foreground="#008080" 
                                                             HorizontalAlignment="Center" 
                                                             VerticalAlignment="Center"/>
                        </Button>
                    </StackPanel>
                </Grid>

                <DataGrid x:Name="dt_TaskBody" Grid.Row="1"
                            AutoGenerateColumns="False"
                            CanUserAddRows="False"
                            CanUserDeleteRows="False"
                            IsReadOnly="True"
                            SelectionUnit="FullRow"
                            BorderThickness="0"
                            Background="White"
                            Margin="5"
                            ColumnHeaderHeight="40"
                            RowHeight="35"
                            Style="{StaticResource MaterialDesignDataGrid}">
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="TaskName" Binding="{Binding TaskName}" Width="120" SortMemberPath="TaskName"/>
                        <DataGridTextColumn Header="UnitName" Binding="{Binding UnitName}" Width="*" SortMemberPath="UnitName"/>
                        <DataGridTextColumn Header="Duration" Binding="{Binding Duration}" Width="*" SortMemberPath="Duration" />
                        <DataGridTextColumn Header="Description" Binding="{Binding Description}" Width="*" SortMemberPath="Description"/>

                        <DataGridTemplateColumn Header="Action" Width="*" >
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Margin="-5">
                                        <Button x:Name="bt_TaskEdit" Click="ActionButton_Click" Tag ="Edit" Width="30" Height="30" Padding="-5,0" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center"  Style="{StaticResource MaterialDesignFlatButton}" >
                                            <materialDesign:PackIcon Kind="ClipboardEditOutline" 
                                                             Width="20" 
                                                             Height="20" 
                                                             Foreground="Gray" 
                                                             HorizontalAlignment="Center" 
                                                             VerticalAlignment="Center"
                                                             ToolTip="Edit"/>
                                        </Button>
                                        <Button x:Name="bt_TaskCopy" Click="ActionButton_Click" Tag ="Copy" Width="30" Height="30" Padding="-5,0" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center"  Style="{StaticResource MaterialDesignFlatButton}" >
                                            <materialDesign:PackIcon Kind="ClipboardMultipleOutline" 
                                                             Width="20" 
                                                             Height="20" 
                                                             Foreground="Gray"
                                                             HorizontalAlignment="Center" 
                                                             VerticalAlignment="Center"
                                                             ToolTip="Copy"/>
                                        </Button>
                                        <ToggleButton Margin="5,0,0,0" Width="20" Height="20" Background="Transparent" Style="{StaticResource MaterialDesignActionToggleButton}">
                                            <materialDesign:ToggleButtonAssist.OnContent>
                                                <materialDesign:PackIcon Kind="ClipboardPulseOutline" Width="20" Height="20"  Foreground="Gray" ToolTip="Alive"/>
                                            </materialDesign:ToggleButtonAssist.OnContent>
                                            <ToggleButton.Content>
                                                <materialDesign:PackIcon Kind="ClipboardRemoveOutline" Width="20" Height="20" Foreground="Black" ToolTip="Delete"/>
                                            </ToggleButton.Content>
                                        </ToggleButton>

                                    </StackPanel>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                    </DataGrid.Columns>
                </DataGrid>
            </Grid>
        </Border>
    </Grid>
</Page>

This is Page1_Task.xaml

using Microsoft.Data.Sqlite;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using Dapper;
using static WorkTrack.InputTask;

namespace WorkTrack
{
    /// <summary>
    /// Page1.xaml ?????
    /// </summary>
    public partial class Page1_Task : Page
    {
        public Page1_Task()
        {
            InitializeComponent();
            ip_TaskDate.SelectedDateChanged -= ip_TaskDate_SelectedDateChanged; // ????????
            ip_TaskDate.SelectedDate = DateTime.Today; // ??????????
            DefaultSearch_TaskBody();
            ip_TaskDate.SelectedDateChanged += ip_TaskDate_SelectedDateChanged; // ??????

        }

        public async Task DefaultSearch_TaskBody()
        {
            try
            {
                if (ip_TaskDate.SelectedDate is not DateTime selectedDate)
                {
                    MessageBox.Show("Please Select Date!", "Error", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }

                var taskSearch = new TaskSearch();
                var taskBodyData = await taskSearch.GetTasks(selectedDate.Date);

                dt_TaskBody.ItemsSource = taskBodyData;

            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to load TaskBody: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void ActionButton_Click(object sender, RoutedEventArgs e)
        {
            if (sender is not Button button) return;

            TaskInitializationMode mode = button.Tag switch
            {
                "Add" => TaskInitializationMode.Add,
                "Edit" => TaskInitializationMode.Edit,
                "Copy" => TaskInitializationMode.Copy,
                _ => throw new ArgumentOutOfRangeException()
            };

            TaskBody task = mode == TaskInitializationMode.Add
                ? new TaskBody { TaskDate = ip_TaskDate.SelectedDate ?? DateTime.Today }
                : button.DataContext as TaskBody ?? new TaskBody { TaskDate = DateTime.Today };

            if (mode == TaskInitializationMode.Add && task.TaskDate == DateTime.MinValue)
            {
                MessageBox.Show("Please Select Date!", "Error", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            var inputTaskWindow = new InputTask(task, mode);
            inputTaskWindow.ShowDialog();
        }

        private async void ip_TaskDate_SelectedDateChanged(object? sender, SelectionChangedEventArgs e)
        {
            await DefaultSearch_TaskBody();

            if (Application.Current.MainWindow is MainWindow mainWindow)
            {
                var selectedDate = ip_TaskDate.SelectedDate ?? DateTime.Today;

                mainWindow.ChartDate.Text = selectedDate.ToString("yyyy-MM-dd");
                await mainWindow.InitializeStackedColumnChart(selectedDate);
            }
        }

    }

}

This is Page1_Task.xaml.cs

Based on the above files, solve my requirements. Please answer in Traditional Chinese, prioritizing solutions that reduce system load, with maintainability as secondary. Responses should be clear, concise, and to the point. Since there are many different files, please first provide the file names and present the solutions in a before-and-after comparison format. For both the before and after content, only show the modified sections, no need to display everything. My requirement is:
