using System;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Windows;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Dapper;
using Microsoft.Data.Sqlite;
using Serilog;
using static WorkTrack.TaskInput;

namespace WorkTrack.ViewModel
{
    public partial class TaskViewModel : ObservableObject
    {
        private readonly ILogger _logger;
        private readonly TaskService _taskService;

        [ObservableProperty]
        private DateTime? _selectedDate;

        [ObservableProperty]
        private ObservableCollection<WorkTrack.Task>? _taskBodyCollection;

        public TaskViewModel(ILogger? logger = null)
        {
            _logger = logger;
            _taskService = new TaskService(logger);
            SelectedDate = DateTime.Today;
            TaskBodyCollection = new ObservableCollection<WorkTrack.Task>();
        }

        partial void OnSelectedDateChanged(DateTime? value)
        {
            LoadTasksCommand.Execute(null);
        }

        [RelayCommand]
        private async System.Threading.Tasks.Task LoadTasksAsync()
        {
            try
            {
                _logger?.Information("Loading tasks for date: {Date}", SelectedDate);
                if (SelectedDate.HasValue)
                {
                    var taskBodyData = await _taskService.GetTasks(SelectedDate.Value.Date);
                    TaskBodyCollection = new ObservableCollection<WorkTrack.Task>(taskBodyData);
                    _logger?.Information("Loaded {Count} tasks", TaskBodyCollection.Count);
                }
                else
                {
                    _logger?.Warning("SelectedDate is null. Unable to load tasks.");
                }
            }
            catch (Exception ex)
            {
                _logger?.Error(ex, "Failed to load tasks");
            }
        }

        [RelayCommand]
        private void AddTask()
        {
            try
            {
                _logger?.Information("Adding new task");
                var newTask = new WorkTrack.Task { TaskDate = SelectedDate ?? DateTime.Today };
                var taskInputWindow = new TaskInput(newTask, TaskInitializationMode.Add);
                if (taskInputWindow.ShowDialog() == true)
                {
                    TaskBodyCollection?.Add(newTask);
                    _logger?.Information("New task added successfully");
                }
            }
            catch (Exception ex)
            {
                _logger?.Error(ex, "Error occurred while adding new task");
            }
        }

        [RelayCommand]
        private void EditTask(Task? task)
        {
            if (task == null)
            {
                _logger?.Warning("Attempted to edit null task");
                return;
            }

            try
            {
                _logger?.Information("Editing task: {TaskId}", task.TaskID);
                var taskInputWindow = new TaskInput(task, TaskInitializationMode.Edit);
                if (taskInputWindow.ShowDialog() == true)
                {
                    var index = TaskBodyCollection?.IndexOf(task) ?? -1;
                    if (index != -1 && TaskBodyCollection != null)
                    {
                        TaskBodyCollection[index] = task;
                    }
                    _logger?.Information("Task edited successfully: {TaskId}", task.TaskID);
                }
            }
            catch (Exception ex)
            {
                _logger?.Error(ex, "Error occurred while editing task: {TaskId}", task.TaskID);
                MessageBox.Show($"操作失敗：{ex.Message}", "錯誤", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        [RelayCommand]
        private void CopyTask(Task? task)
        {
            if (task == null)
            {
                _logger?.Warning("Attempted to copy null task");
                return;
            }

            try
            {
                _logger?.Information("Copying task: {TaskId}", task.TaskID);
                var copyTask = new Task
                {
                    TaskName = task.TaskName,
                    Description = task.Description,
                    DurationLevelID = task.DurationLevelID,
                    Duration = task.Duration,
                    UnitID = task.UnitID,
                    ApplicationID = task.ApplicationID,
                    TaskDate = task.TaskDate
                };
                var taskInputWindow = new TaskInput(copyTask, TaskInitializationMode.Copy);
                if (taskInputWindow.ShowDialog() == true)
                {
                    TaskBodyCollection?.Add(copyTask);
                    _logger?.Information("Task copied successfully");
                }
            }
            catch (Exception ex)
            {
                _logger?.Error(ex, "Error occurred while copying task: {TaskId}", task.TaskID);
            }
        }

        [RelayCommand]
        private async System.Threading.Tasks.Task ToggleTaskDeleteAsync(WorkTrack.Task? task)
        {
            if (task == null)
            {
                _logger?.Warning("Attempted to toggle delete on null task");
                return;
            }

            try
            {
                _logger?.Information("Toggling delete flag for task: {TaskId}", task.TaskID);
                task.DeleteFlag = !task.DeleteFlag;

                using var connection = new SqliteConnection(App.ConnectionString);
                await connection.OpenAsync();

                const string query = "UPDATE TaskBody SET DeleteFlag = @DeleteFlag WHERE TaskID = @TaskID";
                await connection.ExecuteAsync(query, new { task.DeleteFlag, task.TaskID });

                var index = TaskBodyCollection?.IndexOf(task) ?? -1;
                if (index != -1 && TaskBodyCollection != null)
                {
                    TaskBodyCollection[index] = task;
                }

                _logger?.Information("Delete flag toggled successfully for task: {TaskId}", task.TaskID);
            }
            catch (Exception ex)
            {
                _logger?.Error(ex, "Error occurred while toggling delete flag for task: {TaskId}", task.TaskID);
                task.DeleteFlag = !task.DeleteFlag;
            }
        }
    }
}